
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002570  00002604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080017a  0080017a  0000271e  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00002720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000132a  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000607e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000621e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000881b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ad78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 b6 12 	jmp	0x256c	; 0x256c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
uint8 checkPass(void);
void openDoor(void);
void lockSystem(void);

int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c1 54       	subi	r28, 0x41	; 65
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
	 * at the beginning of the application.
	 * - the second variable is the option variable and it has the chosen main option
	 * by the user either to open the door or to change the password.
	 * - the third variable is the passCheck and this variable it to check if the
	 * entered password is right (PASS) or wrong (FAIL)*/
	uint8 status = FAIL, option, passCheck;
     e44:	18 a2       	std	Y+32, r1	; 0x20
	/*Initialization of needed drivers as UART, TWI, DC motor, Buzzer, and Timer1*/
	UART_ConfigType UART_Configurations = {BIT8,DISABLED,BIT1,9600};
     e46:	ce 01       	movw	r24, r28
     e48:	81 96       	adiw	r24, 0x21	; 33
     e4a:	9c ab       	std	Y+52, r25	; 0x34
     e4c:	8b ab       	std	Y+51, r24	; 0x33
     e4e:	e3 e7       	ldi	r30, 0x73	; 115
     e50:	f1 e0       	ldi	r31, 0x01	; 1
     e52:	fe ab       	std	Y+54, r31	; 0x36
     e54:	ed ab       	std	Y+53, r30	; 0x35
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	ff ab       	std	Y+55, r31	; 0x37
     e5a:	ed a9       	ldd	r30, Y+53	; 0x35
     e5c:	fe a9       	ldd	r31, Y+54	; 0x36
     e5e:	00 80       	ld	r0, Z
     e60:	8d a9       	ldd	r24, Y+53	; 0x35
     e62:	9e a9       	ldd	r25, Y+54	; 0x36
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9e ab       	std	Y+54, r25	; 0x36
     e68:	8d ab       	std	Y+53, r24	; 0x35
     e6a:	eb a9       	ldd	r30, Y+51	; 0x33
     e6c:	fc a9       	ldd	r31, Y+52	; 0x34
     e6e:	00 82       	st	Z, r0
     e70:	8b a9       	ldd	r24, Y+51	; 0x33
     e72:	9c a9       	ldd	r25, Y+52	; 0x34
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	9c ab       	std	Y+52, r25	; 0x34
     e78:	8b ab       	std	Y+51, r24	; 0x33
     e7a:	9f a9       	ldd	r25, Y+55	; 0x37
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	9f ab       	std	Y+55, r25	; 0x37
     e80:	ef a9       	ldd	r30, Y+55	; 0x37
     e82:	ee 23       	and	r30, r30
     e84:	51 f7       	brne	.-44     	; 0xe5a <main+0x2c>
	UART_init(&UART_Configurations);
     e86:	ce 01       	movw	r24, r28
     e88:	81 96       	adiw	r24, 0x21	; 33
     e8a:	0e 94 26 11 	call	0x224c	; 0x224c <UART_init>
	TWI_ConfigType TWI_Configurations = {1,FAST_MODE};
     e8e:	ce 01       	movw	r24, r28
     e90:	88 96       	adiw	r24, 0x28	; 40
     e92:	99 af       	std	Y+57, r25	; 0x39
     e94:	88 af       	std	Y+56, r24	; 0x38
     e96:	ee e6       	ldi	r30, 0x6E	; 110
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	fb af       	std	Y+59, r31	; 0x3b
     e9c:	ea af       	std	Y+58, r30	; 0x3a
     e9e:	f5 e0       	ldi	r31, 0x05	; 5
     ea0:	fc af       	std	Y+60, r31	; 0x3c
     ea2:	ea ad       	ldd	r30, Y+58	; 0x3a
     ea4:	fb ad       	ldd	r31, Y+59	; 0x3b
     ea6:	00 80       	ld	r0, Z
     ea8:	8a ad       	ldd	r24, Y+58	; 0x3a
     eaa:	9b ad       	ldd	r25, Y+59	; 0x3b
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	9b af       	std	Y+59, r25	; 0x3b
     eb0:	8a af       	std	Y+58, r24	; 0x3a
     eb2:	e8 ad       	ldd	r30, Y+56	; 0x38
     eb4:	f9 ad       	ldd	r31, Y+57	; 0x39
     eb6:	00 82       	st	Z, r0
     eb8:	88 ad       	ldd	r24, Y+56	; 0x38
     eba:	99 ad       	ldd	r25, Y+57	; 0x39
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	99 af       	std	Y+57, r25	; 0x39
     ec0:	88 af       	std	Y+56, r24	; 0x38
     ec2:	9c ad       	ldd	r25, Y+60	; 0x3c
     ec4:	91 50       	subi	r25, 0x01	; 1
     ec6:	9c af       	std	Y+60, r25	; 0x3c
     ec8:	ec ad       	ldd	r30, Y+60	; 0x3c
     eca:	ee 23       	and	r30, r30
     ecc:	51 f7       	brne	.-44     	; 0xea2 <main+0x74>
	TWI_init(&TWI_Configurations);
     ece:	ce 01       	movw	r24, r28
     ed0:	88 96       	adiw	r24, 0x28	; 40
     ed2:	0e 94 35 10 	call	0x206a	; 0x206a <TWI_init>
	DcMotor_Init();
     ed6:	0e 94 bf 0a 	call	0x157e	; 0x157e <DcMotor_Init>
	Buzzer_init();
     eda:	0e 94 96 0a 	call	0x152c	; 0x152c <Buzzer_init>
	Timer1_ConfigType Timer1_Configurations = {0,0,PRESCALING_1024,CTC};
     ede:	ce 01       	movw	r24, r28
     ee0:	8d 96       	adiw	r24, 0x2d	; 45
     ee2:	9e af       	std	Y+62, r25	; 0x3e
     ee4:	8d af       	std	Y+61, r24	; 0x3d
     ee6:	e8 e6       	ldi	r30, 0x68	; 104
     ee8:	f1 e0       	ldi	r31, 0x01	; 1
     eea:	21 96       	adiw	r28, 0x01	; 1
     eec:	ff af       	std	Y+63, r31	; 0x3f
     eee:	ee af       	std	Y+62, r30	; 0x3e
     ef0:	21 97       	sbiw	r28, 0x01	; 1
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	22 96       	adiw	r28, 0x02	; 2
     ef6:	ff af       	std	Y+63, r31	; 0x3f
     ef8:	22 97       	sbiw	r28, 0x02	; 2
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	ee ad       	ldd	r30, Y+62	; 0x3e
     efe:	ff ad       	ldd	r31, Y+63	; 0x3f
     f00:	21 97       	sbiw	r28, 0x01	; 1
     f02:	00 80       	ld	r0, Z
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	8e ad       	ldd	r24, Y+62	; 0x3e
     f08:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0a:	21 97       	sbiw	r28, 0x01	; 1
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	21 96       	adiw	r28, 0x01	; 1
     f10:	9f af       	std	Y+63, r25	; 0x3f
     f12:	8e af       	std	Y+62, r24	; 0x3e
     f14:	21 97       	sbiw	r28, 0x01	; 1
     f16:	ed ad       	ldd	r30, Y+61	; 0x3d
     f18:	fe ad       	ldd	r31, Y+62	; 0x3e
     f1a:	00 82       	st	Z, r0
     f1c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f1e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	9e af       	std	Y+62, r25	; 0x3e
     f24:	8d af       	std	Y+61, r24	; 0x3d
     f26:	22 96       	adiw	r28, 0x02	; 2
     f28:	9f ad       	ldd	r25, Y+63	; 0x3f
     f2a:	22 97       	sbiw	r28, 0x02	; 2
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	22 96       	adiw	r28, 0x02	; 2
     f30:	9f af       	std	Y+63, r25	; 0x3f
     f32:	22 97       	sbiw	r28, 0x02	; 2
     f34:	22 96       	adiw	r28, 0x02	; 2
     f36:	ef ad       	ldd	r30, Y+63	; 0x3f
     f38:	22 97       	sbiw	r28, 0x02	; 2
     f3a:	ee 23       	and	r30, r30
     f3c:	f1 f6       	brne	.-68     	; 0xefa <main+0xcc>
	while(1)
	{
		/*The first condition is if the status FAIL it will receive the 2 passwords
		 * and send the new status to the HMI ECU but if it is PASS it will
		 * receive the chosen option and start handle it.*/
		if (status == FAIL)
     f3e:	88 a1       	ldd	r24, Y+32	; 0x20
     f40:	88 23       	and	r24, r24
     f42:	39 f4       	brne	.+14     	; 0xf52 <main+0x124>
		{
			status = receive2pass();
     f44:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <receive2pass>
     f48:	88 a3       	std	Y+32, r24	; 0x20
			UART_sendByte(status);
     f4a:	88 a1       	ldd	r24, Y+32	; 0x20
     f4c:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
     f50:	f6 cf       	rjmp	.-20     	; 0xf3e <main+0x110>
		}
		else if(status == PASS)
     f52:	88 a1       	ldd	r24, Y+32	; 0x20
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	99 f7       	brne	.-26     	; 0xf3e <main+0x110>
		{
			option = UART_recieveByte();
     f58:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
     f5c:	8f 8f       	std	Y+31, r24	; 0x1f
			uint8 counter = 0;
     f5e:	1d 8e       	std	Y+29, r1	; 0x1d
     f60:	99 c0       	rjmp	.+306    	; 0x1094 <main+0x266>
			 * the loop and starts to apply the chosen option.
			 * - After each loop the Control ECU receive a ready byte to start the
			 * next loop and to keep both of them in the same loop.*/
			while(counter < 3)
			{
				passCheck = checkPass();
     f62:	0e 94 b7 09 	call	0x136e	; 0x136e <checkPass>
     f66:	8e 8f       	std	Y+30, r24	; 0x1e
				UART_sendByte(passCheck);
     f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f6a:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				if(passCheck == PASS)
     f6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	09 f0       	breq	.+2      	; 0xf76 <main+0x148>
     f74:	88 c0       	rjmp	.+272    	; 0x1086 <main+0x258>
				{
					if(option == '-')
     f76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f78:	8d 32       	cpi	r24, 0x2D	; 45
     f7a:	11 f4       	brne	.+4      	; 0xf80 <main+0x152>
					{
						status = FAIL;
     f7c:	18 a2       	std	Y+32, r1	; 0x20
     f7e:	8e c0       	rjmp	.+284    	; 0x109c <main+0x26e>
					}
					else if (option == '+')
     f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f82:	8b 32       	cpi	r24, 0x2B	; 43
     f84:	09 f0       	breq	.+2      	; 0xf88 <main+0x15a>
     f86:	8a c0       	rjmp	.+276    	; 0x109c <main+0x26e>
					{
						Timer1_init(&Timer1_Configurations);
     f88:	ce 01       	movw	r24, r28
     f8a:	8d 96       	adiw	r24, 0x2d	; 45
     f8c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Timer1_init>
						Timer1_setCallBack(openDoor);
     f90:	8e ef       	ldi	r24, 0xFE	; 254
     f92:	99 e0       	ldi	r25, 0x09	; 9
     f94:	0e 94 23 10 	call	0x2046	; 0x2046 <Timer1_setCallBack>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e8       	ldi	r26, 0x80	; 128
     f9e:	bf e3       	ldi	r27, 0x3F	; 63
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a ef       	ldi	r20, 0xFA	; 250
     fb6:	54 e4       	ldi	r21, 0x44	; 68
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <main+0x1bc>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <main+0x23a>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <main+0x21c>
    102c:	88 ec       	ldi	r24, 0xC8	; 200
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <main+0x20a>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <main+0x1fe>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <main+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <main+0x246>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
						/*This 1ms delay is to freeze the CPU until it access the
						 * call back function and increment the g_tick.*/
						_delay_ms(1);
						/*This while loop is to wait until call back function finish
						 * as it will put the g_tick = 0 again at the end of the function.*/
						while(g_tick != 0);
    107c:	80 91 7a 01 	lds	r24, 0x017A
    1080:	88 23       	and	r24, r24
    1082:	e1 f7       	brne	.-8      	; 0x107c <main+0x24e>
    1084:	0b c0       	rjmp	.+22     	; 0x109c <main+0x26e>
					}
					break;
				}
				/*This loop is to wait until the HMI ECU finish its loop and send the
				 * ready byte.*/
				while(UART_recieveByte() != ECU_READY);
    1086:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    108a:	88 37       	cpi	r24, 0x78	; 120
    108c:	e1 f7       	brne	.-8      	; 0x1086 <main+0x258>
				counter++;
    108e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8d 8f       	std	Y+29, r24	; 0x1d
			 * - The password will be checked maximum 3 times if the entered
			 * password is wrong but if the passCheck is PASS it will break
			 * the loop and starts to apply the chosen option.
			 * - After each loop the Control ECU receive a ready byte to start the
			 * next loop and to keep both of them in the same loop.*/
			while(counter < 3)
    1094:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	08 f4       	brcc	.+2      	; 0x109c <main+0x26e>
    109a:	63 cf       	rjmp	.-314    	; 0xf62 <main+0x134>
				counter++;
			}
			/*If counter = 3 means that the previous for loop finished all
			 * without passing the passCheck so here it will call the lockSystem call
			 * back function.*/
			if(counter == 3)
    109c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <main+0x276>
    10a2:	4d cf       	rjmp	.-358    	; 0xf3e <main+0x110>
			{
				Timer1_init(&Timer1_Configurations);
    10a4:	ce 01       	movw	r24, r28
    10a6:	8d 96       	adiw	r24, 0x2d	; 45
    10a8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Timer1_init>
				Timer1_setCallBack(lockSystem);
    10ac:	89 e5       	ldi	r24, 0x59	; 89
    10ae:	9a e0       	ldi	r25, 0x0A	; 10
    10b0:	0e 94 23 10 	call	0x2046	; 0x2046 <Timer1_setCallBack>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 e8       	ldi	r26, 0x80	; 128
    10ba:	bf e3       	ldi	r27, 0x3F	; 63
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	4a ef       	ldi	r20, 0xFA	; 250
    10d2:	54 e4       	ldi	r21, 0x44	; 68
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <main+0x2d8>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <main+0x356>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <main+0x338>
    1148:	88 ec       	ldi	r24, 0xC8	; 200
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <main+0x326>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <main+0x31a>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <main+0x362>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				while(g_tick != 0);
    1198:	80 91 7a 01 	lds	r24, 0x017A
    119c:	88 23       	and	r24, r24
    119e:	e1 f7       	brne	.-8      	; 0x1198 <main+0x36a>
    11a0:	ce ce       	rjmp	.-612    	; 0xf3e <main+0x110>

000011a2 <receive2pass>:
/*Description:
 * - The function will receive the 2 passwords from the HMI ECU.
 * - It will return FAIL if the 2 passwords are unmatched and it will save the password
 * in the external EEPROM if the 2 passwords are matched and return PASS.*/
uint8 receive2pass(void)
{
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	6c 97       	sbiw	r28, 0x1c	; 28
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[5],pass2[5];
	for(uint8 i = 0; i<5; i++)
    11ba:	19 8a       	std	Y+17, r1	; 0x11
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <receive2pass+0x3a>
	{
		pass1[i] = UART_recieveByte();
    11be:	89 89       	ldd	r24, Y+17	; 0x11
    11c0:	08 2f       	mov	r16, r24
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    11c8:	28 2f       	mov	r18, r24
    11ca:	ce 01       	movw	r24, r28
    11cc:	42 96       	adiw	r24, 0x12	; 18
    11ce:	fc 01       	movw	r30, r24
    11d0:	e0 0f       	add	r30, r16
    11d2:	f1 1f       	adc	r31, r17
    11d4:	20 83       	st	Z, r18
 * - It will return FAIL if the 2 passwords are unmatched and it will save the password
 * in the external EEPROM if the 2 passwords are matched and return PASS.*/
uint8 receive2pass(void)
{
	uint8 pass1[5],pass2[5];
	for(uint8 i = 0; i<5; i++)
    11d6:	89 89       	ldd	r24, Y+17	; 0x11
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 8b       	std	Y+17, r24	; 0x11
    11dc:	89 89       	ldd	r24, Y+17	; 0x11
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	70 f3       	brcs	.-36     	; 0x11be <receive2pass+0x1c>
	{
		pass1[i] = UART_recieveByte();
	}
	for(uint8 i = 0; i<5; i++)
    11e2:	18 8a       	std	Y+16, r1	; 0x10
    11e4:	25 c0       	rjmp	.+74     	; 0x1230 <receive2pass+0x8e>
	{
		pass2[i] = UART_recieveByte();
    11e6:	88 89       	ldd	r24, Y+16	; 0x10
    11e8:	08 2f       	mov	r16, r24
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    11f0:	28 2f       	mov	r18, r24
    11f2:	ce 01       	movw	r24, r28
    11f4:	47 96       	adiw	r24, 0x17	; 23
    11f6:	fc 01       	movw	r30, r24
    11f8:	e0 0f       	add	r30, r16
    11fa:	f1 1f       	adc	r31, r17
    11fc:	20 83       	st	Z, r18
		if(pass2[i] != pass1[i])
    11fe:	88 89       	ldd	r24, Y+16	; 0x10
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	ce 01       	movw	r24, r28
    1206:	47 96       	adiw	r24, 0x17	; 23
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	40 81       	ld	r20, Z
    1210:	88 89       	ldd	r24, Y+16	; 0x10
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	ce 01       	movw	r24, r28
    1218:	42 96       	adiw	r24, 0x12	; 18
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	80 81       	ld	r24, Z
    1222:	48 17       	cp	r20, r24
    1224:	11 f0       	breq	.+4      	; 0x122a <receive2pass+0x88>
		{
			return FAIL;
    1226:	1c 8e       	std	Y+28, r1	; 0x1c
    1228:	96 c0       	rjmp	.+300    	; 0x1356 <receive2pass+0x1b4>
	uint8 pass1[5],pass2[5];
	for(uint8 i = 0; i<5; i++)
	{
		pass1[i] = UART_recieveByte();
	}
	for(uint8 i = 0; i<5; i++)
    122a:	88 89       	ldd	r24, Y+16	; 0x10
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	88 8b       	std	Y+16, r24	; 0x10
    1230:	88 89       	ldd	r24, Y+16	; 0x10
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	c0 f2       	brcs	.-80     	; 0x11e6 <receive2pass+0x44>
		if(pass2[i] != pass1[i])
		{
			return FAIL;
		}
	}
	for(uint8 i = 0; i<5; i++)
    1236:	1f 86       	std	Y+15, r1	; 0x0f
    1238:	88 c0       	rjmp	.+272    	; 0x134a <receive2pass+0x1a8>
	{
		EEPROM_writeByte(EEPROM_ADDRESS + i, pass1[i]);
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	8f 5e       	subi	r24, 0xEF	; 239
    1242:	9c 4f       	sbci	r25, 0xFC	; 252
    1244:	ac 01       	movw	r20, r24
    1246:	8f 85       	ldd	r24, Y+15	; 0x0f
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	ce 01       	movw	r24, r28
    124e:	42 96       	adiw	r24, 0x12	; 18
    1250:	fc 01       	movw	r30, r24
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
    1256:	20 81       	ld	r18, Z
    1258:	ca 01       	movw	r24, r20
    125a:	62 2f       	mov	r22, r18
    125c:	0e 94 12 0b 	call	0x1624	; 0x1624 <EEPROM_writeByte>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e2       	ldi	r26, 0x20	; 32
    1266:	b1 e4       	ldi	r27, 0x41	; 65
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	9c 87       	std	Y+12, r25	; 0x0c
    126c:	ad 87       	std	Y+13, r26	; 0x0d
    126e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a ef       	ldi	r20, 0xFA	; 250
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8f 83       	std	Y+7, r24	; 0x07
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	a9 87       	std	Y+9, r26	; 0x09
    128e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <receive2pass+0x110>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <receive2pass+0x18e>
	else if (__tmp > 65535)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <receive2pass+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <receive2pass+0x170>
    12f4:	88 ec       	ldi	r24, 0xC8	; 200
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <receive2pass+0x15e>
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <receive2pass+0x152>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <receive2pass+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <receive2pass+0x19a>
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
		if(pass2[i] != pass1[i])
		{
			return FAIL;
		}
	}
	for(uint8 i = 0; i<5; i++)
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	8f 87       	std	Y+15, r24	; 0x0f
    134a:	8f 85       	ldd	r24, Y+15	; 0x0f
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	08 f4       	brcc	.+2      	; 0x1352 <receive2pass+0x1b0>
    1350:	74 cf       	rjmp	.-280    	; 0x123a <receive2pass+0x98>
	{
		EEPROM_writeByte(EEPROM_ADDRESS + i, pass1[i]);
		_delay_ms(10);
	}

	return PASS;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8c 8f       	std	Y+28, r24	; 0x1c
    1356:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    1358:	6c 96       	adiw	r28, 0x1c	; 28
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <checkPass>:
 * - The function receive the entered password from the HMI ECU and compare it with
 * the password in the external EEPROM.
 * - The function return PASS if the received password match the stored one
 * and return FAIL if they are not. */
uint8 checkPass(void)
{
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	28 97       	sbiw	r28, 0x08	; 8
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5];
	uint8 val;
	for(uint8 i = 0; i<5; i++)
    1386:	19 82       	std	Y+1, r1	; 0x01
    1388:	28 c0       	rjmp	.+80     	; 0x13da <checkPass+0x6c>
	{
		pass[i] = UART_recieveByte();
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	08 2f       	mov	r16, r24
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    1394:	28 2f       	mov	r18, r24
    1396:	ce 01       	movw	r24, r28
    1398:	02 96       	adiw	r24, 0x02	; 2
    139a:	fc 01       	movw	r30, r24
    139c:	e0 0f       	add	r30, r16
    139e:	f1 1f       	adc	r31, r17
    13a0:	20 83       	st	Z, r18
		EEPROM_readByte(EEPROM_ADDRESS + i,&val);
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	8f 5e       	subi	r24, 0xEF	; 239
    13aa:	9c 4f       	sbci	r25, 0xFC	; 252
    13ac:	9e 01       	movw	r18, r28
    13ae:	29 5f       	subi	r18, 0xF9	; 249
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <EEPROM_readByte>
		if (pass[i] != val)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	02 96       	adiw	r24, 0x02	; 2
    13c2:	fc 01       	movw	r30, r24
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	90 81       	ld	r25, Z
    13ca:	8f 81       	ldd	r24, Y+7	; 0x07
    13cc:	98 17       	cp	r25, r24
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <checkPass+0x66>
		{
			return FAIL;
    13d0:	18 86       	std	Y+8, r1	; 0x08
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <checkPass+0x76>
 * and return FAIL if they are not. */
uint8 checkPass(void)
{
	uint8 pass[5];
	uint8 val;
	for(uint8 i = 0; i<5; i++)
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	a8 f2       	brcs	.-86     	; 0x138a <checkPass+0x1c>
		if (pass[i] != val)
		{
			return FAIL;
		}
	}
	return PASS;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	88 87       	std	Y+8, r24	; 0x08
    13e4:	88 85       	ldd	r24, Y+8	; 0x08
}
    13e6:	28 96       	adiw	r28, 0x08	; 8
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <openDoor>:
 * - This is a call back function and it will be called if the user choose to
 * open the door.
 * - It is responsible to rotate the motor CW, A_CW, STOP on its maximum speed and to
 * calculate the needed time by changing the number in the OCR1A register every g_tick.*/
void openDoor(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
		 * - timer frequency = 8*10^6 / 1024 = 7812.5 hz
		 * - clock cycle = 1 / 7812.5 = 1.28*10^-4 sec
		 * - 2^16 = 65536 (0 -> 65535)
		 * - 15 sec (CW & A_CW) -> 15 / 1.28*10^-4 = 117187 clock cycle (65535 + 51652)
		 * - 3 sec (STOP) -> 3 / 1.28*10^-4 = 23437 clock cycle*/
	g_tick++;
    1404:	80 91 7a 01 	lds	r24, 0x017A
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	80 93 7a 01 	sts	0x017A, r24
	if (g_tick == 1)
    140e:	80 91 7a 01 	lds	r24, 0x017A
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	59 f4       	brne	.+22     	; 0x142c <openDoor+0x30>
	{
		DcMotor_Rotate(CW,100);
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	64 e6       	ldi	r22, 0x64	; 100
    141a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <DcMotor_Rotate>
		OCR1A = 65535;
    141e:	ea e4       	ldi	r30, 0x4A	; 74
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	9f ef       	ldi	r25, 0xFF	; 255
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	40 c0       	rjmp	.+128    	; 0x14ac <openDoor+0xb0>
	}
	else if (g_tick == 2)
    142c:	80 91 7a 01 	lds	r24, 0x017A
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	39 f4       	brne	.+14     	; 0x1442 <openDoor+0x46>
	{
		OCR1A = 51652;
    1434:	ea e4       	ldi	r30, 0x4A	; 74
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	84 ec       	ldi	r24, 0xC4	; 196
    143a:	99 ec       	ldi	r25, 0xC9	; 201
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	35 c0       	rjmp	.+106    	; 0x14ac <openDoor+0xb0>
	}
	else if (g_tick == 3)
    1442:	80 91 7a 01 	lds	r24, 0x017A
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	59 f4       	brne	.+22     	; 0x1460 <openDoor+0x64>
	{
		DcMotor_Rotate(STOP,0);
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <DcMotor_Rotate>
		OCR1A = 23437;
    1452:	ea e4       	ldi	r30, 0x4A	; 74
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8d e8       	ldi	r24, 0x8D	; 141
    1458:	9b e5       	ldi	r25, 0x5B	; 91
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	26 c0       	rjmp	.+76     	; 0x14ac <openDoor+0xb0>
	}
	else if (g_tick == 4)
    1460:	80 91 7a 01 	lds	r24, 0x017A
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	59 f4       	brne	.+22     	; 0x147e <openDoor+0x82>
	{
		DcMotor_Rotate(A_CW,100);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	64 e6       	ldi	r22, 0x64	; 100
    146c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <DcMotor_Rotate>
		OCR1A = 65535;
    1470:	ea e4       	ldi	r30, 0x4A	; 74
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	9f ef       	ldi	r25, 0xFF	; 255
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	17 c0       	rjmp	.+46     	; 0x14ac <openDoor+0xb0>
	}
	else if (g_tick == 5)
    147e:	80 91 7a 01 	lds	r24, 0x017A
    1482:	85 30       	cpi	r24, 0x05	; 5
    1484:	39 f4       	brne	.+14     	; 0x1494 <openDoor+0x98>
	{
		OCR1A = 51652;
    1486:	ea e4       	ldi	r30, 0x4A	; 74
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	84 ec       	ldi	r24, 0xC4	; 196
    148c:	99 ec       	ldi	r25, 0xC9	; 201
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
    1492:	0c c0       	rjmp	.+24     	; 0x14ac <openDoor+0xb0>
	}
	else if (g_tick == 6)
    1494:	80 91 7a 01 	lds	r24, 0x017A
    1498:	86 30       	cpi	r24, 0x06	; 6
    149a:	41 f4       	brne	.+16     	; 0x14ac <openDoor+0xb0>
	{
		DcMotor_Rotate(STOP,0);
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <DcMotor_Rotate>
		g_tick = 0;
    14a4:	10 92 7a 01 	sts	0x017A, r1
		Timer1_deInit();
    14a8:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <Timer1_deInit>
	}
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <lockSystem>:
/*Description:
 * - This is a call back function and it will be called if the user enters the
 * password wrong 3 times.
 * - It is responsible to turn on the buzzer for 1 minute then turn it off.*/
void lockSystem(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	 * CPU frequency = 8 Mhz
	 * timer frequency = 8*10^6 / 1024 = 7812.5 hz
	 * clock cycle = 1 / 7812.5 = 1.28*10^-4 sec
	 * 2^16 = 65536 (0 -> 65535)
	 * 1 min (60 sec) -> 60 / 1.28*10^-4 = 468750 clock cycle ((7 * 65535) + 10005)*/
	g_tick++;
    14ba:	80 91 7a 01 	lds	r24, 0x017A
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 7a 01 	sts	0x017A, r24
	if(g_tick == 1)
    14c4:	80 91 7a 01 	lds	r24, 0x017A
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	49 f4       	brne	.+18     	; 0x14de <lockSystem+0x2c>
	{
		Buzzer_on();
    14cc:	0e 94 a7 0a 	call	0x154e	; 0x154e <Buzzer_on>
		OCR1A = 65535;
    14d0:	ea e4       	ldi	r30, 0x4A	; 74
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	24 c0       	rjmp	.+72     	; 0x1526 <lockSystem+0x74>
	}
	else if (g_tick > 1 && g_tick < 8)
    14de:	80 91 7a 01 	lds	r24, 0x017A
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	58 f0       	brcs	.+22     	; 0x14fc <lockSystem+0x4a>
    14e6:	80 91 7a 01 	lds	r24, 0x017A
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	38 f4       	brcc	.+14     	; 0x14fc <lockSystem+0x4a>
	{
		OCR1A = 65535;
    14ee:	ea e4       	ldi	r30, 0x4A	; 74
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
    14fa:	15 c0       	rjmp	.+42     	; 0x1526 <lockSystem+0x74>
	}
	else if (g_tick == 8)
    14fc:	80 91 7a 01 	lds	r24, 0x017A
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	39 f4       	brne	.+14     	; 0x1512 <lockSystem+0x60>
	{
		OCR1A = 10005;
    1504:	ea e4       	ldi	r30, 0x4A	; 74
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	85 e1       	ldi	r24, 0x15	; 21
    150a:	97 e2       	ldi	r25, 0x27	; 39
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <lockSystem+0x74>
	}
	else if (g_tick == 9)
    1512:	80 91 7a 01 	lds	r24, 0x017A
    1516:	89 30       	cpi	r24, 0x09	; 9
    1518:	31 f4       	brne	.+12     	; 0x1526 <lockSystem+0x74>
	{
		Buzzer_off();
    151a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Buzzer_off>
		g_tick = 0;
    151e:	10 92 7a 01 	sts	0x017A, r1
		Timer1_deInit();
    1522:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <Timer1_deInit>
	}
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <Buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init()
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <Buzzer_on>:

void Buzzer_on(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <Buzzer_off>:

void Buzzer_off(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DcMotor_Init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void DcMotor_Init(void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,PIN_OUTPUT);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	41 e0       	ldi	r20, 0x01	; 1
    158c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,PIN_OUTPUT);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_setupPinDirection>
	GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
	GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
	GPIO_setupPinDirection(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,PIN_OUTPUT);
	GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
	GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
#endif
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <DcMotor_Rotate+0x6>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	6a 83       	std	Y+2, r22	; 0x02
	if(state == CW)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 23       	and	r24, r24
    15c6:	59 f4       	brne	.+22     	; 0x15de <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_HIGH);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
    15dc:	1b c0       	rjmp	.+54     	; 0x1614 <DcMotor_Rotate+0x60>
#if(NUM_OF_MOTORS > 1)
		GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_HIGH);
		GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
#endif
	}
	else if(state == A_CW)
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	59 f4       	brne	.+22     	; 0x15fa <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_HIGH);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <DcMotor_Rotate+0x60>
#if(NUM_OF_MOTORS > 1)
		GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
		GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_HIGH);
#endif
	}
	else if(state == STOP)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	51 f4       	brne	.+20     	; 0x1614 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_writePin>
#if(NUM_OF_MOTORS > 1)
		GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
		GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
#endif
	}
	PWM_Timer0_Start(speed);
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <PWM_Timer0_Start>
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <EEPROM_writeByte+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <EEPROM_writeByte+0x8>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1636:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    163a:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	11 f0       	breq	.+4      	; 0x1646 <EEPROM_writeByte+0x22>
        return ERROR;
    1642:	1c 82       	std	Y+4, r1	; 0x04
    1644:	28 c0       	rjmp	.+80     	; 0x1696 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	80 70       	andi	r24, 0x00	; 0
    164c:	97 70       	andi	r25, 0x07	; 7
    164e:	88 0f       	add	r24, r24
    1650:	89 2f       	mov	r24, r25
    1652:	88 1f       	adc	r24, r24
    1654:	99 0b       	sbc	r25, r25
    1656:	91 95       	neg	r25
    1658:	80 6a       	ori	r24, 0xA0	; 160
    165a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    165e:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    1662:	88 31       	cpi	r24, 0x18	; 24
    1664:	11 f0       	breq	.+4      	; 0x166a <EEPROM_writeByte+0x46>
        return ERROR; 
    1666:	1c 82       	std	Y+4, r1	; 0x04
    1668:	16 c0       	rjmp	.+44     	; 0x1696 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1670:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    1674:	88 32       	cpi	r24, 0x28	; 40
    1676:	11 f0       	breq	.+4      	; 0x167c <EEPROM_writeByte+0x58>
        return ERROR;
    1678:	1c 82       	std	Y+4, r1	; 0x04
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1682:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    1686:	88 32       	cpi	r24, 0x28	; 40
    1688:	11 f0       	breq	.+4      	; 0x168e <EEPROM_writeByte+0x6a>
        return ERROR;
    168a:	1c 82       	std	Y+4, r1	; 0x04
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    168e:	0e 94 cf 10 	call	0x219e	; 0x219e <TWI_stop>
	
    return SUCCESS;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	8c 83       	std	Y+4, r24	; 0x04
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <EEPROM_readByte+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <EEPROM_readByte+0x8>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	7c 83       	std	Y+4, r23	; 0x04
    16ba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16bc:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16c0:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    16c4:	88 30       	cpi	r24, 0x08	; 8
    16c6:	11 f0       	breq	.+4      	; 0x16cc <EEPROM_readByte+0x26>
        return ERROR;
    16c8:	1d 82       	std	Y+5, r1	; 0x05
    16ca:	44 c0       	rjmp	.+136    	; 0x1754 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	80 70       	andi	r24, 0x00	; 0
    16d2:	97 70       	andi	r25, 0x07	; 7
    16d4:	88 0f       	add	r24, r24
    16d6:	89 2f       	mov	r24, r25
    16d8:	88 1f       	adc	r24, r24
    16da:	99 0b       	sbc	r25, r25
    16dc:	91 95       	neg	r25
    16de:	80 6a       	ori	r24, 0xA0	; 160
    16e0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16e4:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    16e8:	88 31       	cpi	r24, 0x18	; 24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <EEPROM_readByte+0x4a>
        return ERROR;
    16ec:	1d 82       	std	Y+5, r1	; 0x05
    16ee:	32 c0       	rjmp	.+100    	; 0x1754 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16f6:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    16fa:	88 32       	cpi	r24, 0x28	; 40
    16fc:	11 f0       	breq	.+4      	; 0x1702 <EEPROM_readByte+0x5c>
        return ERROR;
    16fe:	1d 82       	std	Y+5, r1	; 0x05
    1700:	29 c0       	rjmp	.+82     	; 0x1754 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1702:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1706:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    170a:	80 31       	cpi	r24, 0x10	; 16
    170c:	11 f0       	breq	.+4      	; 0x1712 <EEPROM_readByte+0x6c>
        return ERROR;
    170e:	1d 82       	std	Y+5, r1	; 0x05
    1710:	21 c0       	rjmp	.+66     	; 0x1754 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	80 70       	andi	r24, 0x00	; 0
    1718:	97 70       	andi	r25, 0x07	; 7
    171a:	88 0f       	add	r24, r24
    171c:	89 2f       	mov	r24, r25
    171e:	88 1f       	adc	r24, r24
    1720:	99 0b       	sbc	r25, r25
    1722:	91 95       	neg	r25
    1724:	81 6a       	ori	r24, 0xA1	; 161
    1726:	0e 94 da 10 	call	0x21b4	; 0x21b4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    172a:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    172e:	80 34       	cpi	r24, 0x40	; 64
    1730:	11 f0       	breq	.+4      	; 0x1736 <EEPROM_readByte+0x90>
        return ERROR;
    1732:	1d 82       	std	Y+5, r1	; 0x05
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1736:	0e 94 04 11 	call	0x2208	; 0x2208 <TWI_readByteWithNACK>
    173a:	eb 81       	ldd	r30, Y+3	; 0x03
    173c:	fc 81       	ldd	r31, Y+4	; 0x04
    173e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1740:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_getStatus>
    1744:	88 35       	cpi	r24, 0x58	; 88
    1746:	11 f0       	breq	.+4      	; 0x174c <EEPROM_readByte+0xa6>
        return ERROR;
    1748:	1d 82       	std	Y+5, r1	; 0x05
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    174c:	0e 94 cf 10 	call	0x219e	; 0x219e <TWI_stop>

    return SUCCESS;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_setupPinDirection+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_setupPinDirection+0x8>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
    1778:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	08 f0       	brcs	.+2      	; 0x1782 <GPIO_setupPinDirection+0x1c>
    1780:	d5 c0       	rjmp	.+426    	; 0x192c <GPIO_setupPinDirection+0x1c6>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <GPIO_setupPinDirection+0x24>
    1788:	d1 c0       	rjmp	.+418    	; 0x192c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3d 83       	std	Y+5, r19	; 0x05
    1792:	2c 83       	std	Y+4, r18	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <GPIO_setupPinDirection+0x3a>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <GPIO_setupPinDirection+0xc0>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <GPIO_setupPinDirection+0x4e>
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	71 f0       	breq	.+28     	; 0x17ce <GPIO_setupPinDirection+0x68>
    17b2:	bc c0       	rjmp	.+376    	; 0x192c <GPIO_setupPinDirection+0x1c6>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <GPIO_setupPinDirection+0x5a>
    17be:	5f c0       	rjmp	.+190    	; 0x187e <GPIO_setupPinDirection+0x118>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <GPIO_setupPinDirection+0x66>
    17ca:	85 c0       	rjmp	.+266    	; 0x18d6 <GPIO_setupPinDirection+0x170>
    17cc:	af c0       	rjmp	.+350    	; 0x192c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	a1 f4       	brne	.+40     	; 0x17fc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17d4:	aa e3       	ldi	r26, 0x3A	; 58
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ea e3       	ldi	r30, 0x3A	; 58
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_setupPinDirection+0x8c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_setupPinDirection+0x88>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	98 c0       	rjmp	.+304    	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17fc:	aa e3       	ldi	r26, 0x3A	; 58
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ea e3       	ldi	r30, 0x3A	; 58
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_setupPinDirection+0xb4>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_setupPinDirection+0xb0>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	83 c0       	rjmp	.+262    	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	a1 f4       	brne	.+40     	; 0x1854 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    182c:	a7 e3       	ldi	r26, 0x37	; 55
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e7 e3       	ldi	r30, 0x37	; 55
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GPIO_setupPinDirection+0xe4>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <GPIO_setupPinDirection+0xe0>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	6c c0       	rjmp	.+216    	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_setupPinDirection+0x10c>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_setupPinDirection+0x108>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	57 c0       	rjmp	.+174    	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	a1 f4       	brne	.+40     	; 0x18ac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1884:	a4 e3       	ldi	r26, 0x34	; 52
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_setupPinDirection+0x13c>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_setupPinDirection+0x138>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	40 c0       	rjmp	.+128    	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_setupPinDirection+0x164>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_setupPinDirection+0x160>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	2b c0       	rjmp	.+86     	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	a1 f4       	brne	.+40     	; 0x1904 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18dc:	a1 e3       	ldi	r26, 0x31	; 49
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e1 e3       	ldi	r30, 0x31	; 49
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_setupPinDirection+0x194>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_setupPinDirection+0x190>
    18fe:	84 2b       	or	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	14 c0       	rjmp	.+40     	; 0x192c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1904:	a1 e3       	ldi	r26, 0x31	; 49
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_setupPinDirection+0x1bc>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_setupPinDirection+0x1b8>
    1926:	80 95       	com	r24
    1928:	84 23       	and	r24, r20
    192a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_writePin+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_writePin+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
    194e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <GPIO_writePin+0x1c>
    1956:	d5 c0       	rjmp	.+426    	; 0x1b02 <GPIO_writePin+0x1c6>
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	08 f0       	brcs	.+2      	; 0x1960 <GPIO_writePin+0x24>
    195e:	d1 c0       	rjmp	.+418    	; 0x1b02 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3d 83       	std	Y+5, r19	; 0x05
    1968:	2c 83       	std	Y+4, r18	; 0x04
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <GPIO_writePin+0x3a>
    1974:	43 c0       	rjmp	.+134    	; 0x19fc <GPIO_writePin+0xc0>
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	2c f4       	brge	.+10     	; 0x198a <GPIO_writePin+0x4e>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	71 f0       	breq	.+28     	; 0x19a4 <GPIO_writePin+0x68>
    1988:	bc c0       	rjmp	.+376    	; 0x1b02 <GPIO_writePin+0x1c6>
    198a:	2c 81       	ldd	r18, Y+4	; 0x04
    198c:	3d 81       	ldd	r19, Y+5	; 0x05
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <GPIO_writePin+0x5a>
    1994:	5f c0       	rjmp	.+190    	; 0x1a54 <GPIO_writePin+0x118>
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <GPIO_writePin+0x66>
    19a0:	85 c0       	rjmp	.+266    	; 0x1aac <GPIO_writePin+0x170>
    19a2:	af c0       	rjmp	.+350    	; 0x1b02 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	a1 f4       	brne	.+40     	; 0x19d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19aa:	ab e3       	ldi	r26, 0x3B	; 59
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb e3       	ldi	r30, 0x3B	; 59
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_writePin+0x8c>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_writePin+0x88>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	98 c0       	rjmp	.+304    	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_writePin+0xb4>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_writePin+0xb0>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	83 c0       	rjmp	.+262    	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	a1 f4       	brne	.+40     	; 0x1a2a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a02:	a8 e3       	ldi	r26, 0x38	; 56
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e8 e3       	ldi	r30, 0x38	; 56
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <GPIO_writePin+0xe4>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <GPIO_writePin+0xe0>
    1a24:	84 2b       	or	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	6c c0       	rjmp	.+216    	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a2a:	a8 e3       	ldi	r26, 0x38	; 56
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e8 e3       	ldi	r30, 0x38	; 56
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <GPIO_writePin+0x10c>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <GPIO_writePin+0x108>
    1a4c:	80 95       	com	r24
    1a4e:	84 23       	and	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	57 c0       	rjmp	.+174    	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	a1 f4       	brne	.+40     	; 0x1a82 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a5a:	a5 e3       	ldi	r26, 0x35	; 53
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e3       	ldi	r30, 0x35	; 53
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <GPIO_writePin+0x13c>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <GPIO_writePin+0x138>
    1a7c:	84 2b       	or	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	40 c0       	rjmp	.+128    	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a82:	a5 e3       	ldi	r26, 0x35	; 53
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e3       	ldi	r30, 0x35	; 53
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_writePin+0x164>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_writePin+0x160>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	2b c0       	rjmp	.+86     	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	a1 f4       	brne	.+40     	; 0x1ada <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ab2:	a2 e3       	ldi	r26, 0x32	; 50
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e2 e3       	ldi	r30, 0x32	; 50
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_writePin+0x194>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_writePin+0x190>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ada:	a2 e3       	ldi	r26, 0x32	; 50
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e2 e3       	ldi	r30, 0x32	; 50
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_writePin+0x1bc>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_writePin+0x1b8>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_readPin+0x6>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_readPin+0x8>
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	8a 83       	std	Y+2, r24	; 0x02
    1b22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b24:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <GPIO_readPin+0x1c>
    1b2c:	84 c0       	rjmp	.+264    	; 0x1c36 <GPIO_readPin+0x124>
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <GPIO_readPin+0x24>
    1b34:	80 c0       	rjmp	.+256    	; 0x1c36 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	4c 81       	ldd	r20, Y+4	; 0x04
    1b42:	5d 81       	ldd	r21, Y+5	; 0x05
    1b44:	41 30       	cpi	r20, 0x01	; 1
    1b46:	51 05       	cpc	r21, r1
    1b48:	79 f1       	breq	.+94     	; 0x1ba8 <GPIO_readPin+0x96>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	91 05       	cpc	r25, r1
    1b52:	34 f4       	brge	.+12     	; 0x1b60 <GPIO_readPin+0x4e>
    1b54:	2c 81       	ldd	r18, Y+4	; 0x04
    1b56:	3d 81       	ldd	r19, Y+5	; 0x05
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	69 f0       	breq	.+26     	; 0x1b78 <GPIO_readPin+0x66>
    1b5e:	6b c0       	rjmp	.+214    	; 0x1c36 <GPIO_readPin+0x124>
    1b60:	4c 81       	ldd	r20, Y+4	; 0x04
    1b62:	5d 81       	ldd	r21, Y+5	; 0x05
    1b64:	42 30       	cpi	r20, 0x02	; 2
    1b66:	51 05       	cpc	r21, r1
    1b68:	b9 f1       	breq	.+110    	; 0x1bd8 <GPIO_readPin+0xc6>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	83 30       	cpi	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <GPIO_readPin+0x64>
    1b74:	49 c0       	rjmp	.+146    	; 0x1c08 <GPIO_readPin+0xf6>
    1b76:	5f c0       	rjmp	.+190    	; 0x1c36 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b78:	e9 e3       	ldi	r30, 0x39	; 57
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_readPin+0x7e>
    1b8c:	55 95       	asr	r21
    1b8e:	47 95       	ror	r20
    1b90:	8a 95       	dec	r24
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_readPin+0x7a>
    1b94:	ca 01       	movw	r24, r20
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	90 70       	andi	r25, 0x00	; 0
    1b9a:	88 23       	and	r24, r24
    1b9c:	19 f0       	breq	.+6      	; 0x1ba4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	49 c0       	rjmp	.+146    	; 0x1c36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	47 c0       	rjmp	.+142    	; 0x1c36 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ba8:	e6 e3       	ldi	r30, 0x36	; 54
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_readPin+0xae>
    1bbc:	55 95       	asr	r21
    1bbe:	47 95       	ror	r20
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_readPin+0xaa>
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	81 70       	andi	r24, 0x01	; 1
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	88 23       	and	r24, r24
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	31 c0       	rjmp	.+98     	; 0x1c36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	2f c0       	rjmp	.+94     	; 0x1c36 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bd8:	e3 e3       	ldi	r30, 0x33	; 51
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a9 01       	movw	r20, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <GPIO_readPin+0xde>
    1bec:	55 95       	asr	r21
    1bee:	47 95       	ror	r20
    1bf0:	8a 95       	dec	r24
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <GPIO_readPin+0xda>
    1bf4:	ca 01       	movw	r24, r20
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	90 70       	andi	r25, 0x00	; 0
    1bfa:	88 23       	and	r24, r24
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	17 c0       	rjmp	.+46     	; 0x1c36 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c08:	e0 e3       	ldi	r30, 0x30	; 48
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <GPIO_readPin+0x10e>
    1c1c:	55 95       	asr	r21
    1c1e:	47 95       	ror	r20
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <GPIO_readPin+0x10a>
    1c24:	ca 01       	movw	r24, r20
    1c26:	81 70       	andi	r24, 0x01	; 1
    1c28:	90 70       	andi	r25, 0x00	; 0
    1c2a:	88 23       	and	r24, r24
    1c2c:	19 f0       	breq	.+6      	; 0x1c34 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c34:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <GPIO_setupPortDirection+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <GPIO_setupPortDirection+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	90 f5       	brcc	.+100    	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3c 83       	std	Y+4, r19	; 0x04
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	d1 f0       	breq	.+52     	; 0x1ca6 <GPIO_setupPortDirection+0x5e>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	22 30       	cpi	r18, 0x02	; 2
    1c78:	31 05       	cpc	r19, r1
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <GPIO_setupPortDirection+0x3e>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <GPIO_setupPortDirection+0x54>
    1c84:	1e c0       	rjmp	.+60     	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <GPIO_setupPortDirection+0x68>
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	91 05       	cpc	r25, r1
    1c98:	81 f0       	breq	.+32     	; 0x1cba <GPIO_setupPortDirection+0x72>
    1c9a:	13 c0       	rjmp	.+38     	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c9c:	ea e3       	ldi	r30, 0x3A	; 58
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	80 83       	st	Z, r24
    1ca4:	0e c0       	rjmp	.+28     	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ca6:	e7 e3       	ldi	r30, 0x37	; 55
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	80 83       	st	Z, r24
    1cae:	09 c0       	rjmp	.+18     	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cb0:	e4 e3       	ldi	r30, 0x34	; 52
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	80 83       	st	Z, r24
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cba:	e1 e3       	ldi	r30, 0x31	; 49
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_writePort+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <GPIO_writePort+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	90 f5       	brcc	.+100    	; 0x1d4a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3c 83       	std	Y+4, r19	; 0x04
    1cee:	2b 83       	std	Y+3, r18	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	d1 f0       	breq	.+52     	; 0x1d2e <GPIO_writePort+0x5e>
    1cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfe:	22 30       	cpi	r18, 0x02	; 2
    1d00:	31 05       	cpc	r19, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <GPIO_writePort+0x3e>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <GPIO_writePort+0x54>
    1d0c:	1e c0       	rjmp	.+60     	; 0x1d4a <GPIO_writePort+0x7a>
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	81 f0       	breq	.+32     	; 0x1d38 <GPIO_writePort+0x68>
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	91 05       	cpc	r25, r1
    1d20:	81 f0       	breq	.+32     	; 0x1d42 <GPIO_writePort+0x72>
    1d22:	13 c0       	rjmp	.+38     	; 0x1d4a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d24:	eb e3       	ldi	r30, 0x3B	; 59
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	80 83       	st	Z, r24
    1d2c:	0e c0       	rjmp	.+28     	; 0x1d4a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d2e:	e8 e3       	ldi	r30, 0x38	; 56
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 83       	st	Z, r24
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d38:	e5 e3       	ldi	r30, 0x35	; 53
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d42:	e2 e3       	ldi	r30, 0x32	; 50
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <GPIO_readPort+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <GPIO_readPort+0x8>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d66:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	90 f5       	brcc	.+100    	; 0x1dd2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3c 83       	std	Y+4, r19	; 0x04
    1d76:	2b 83       	std	Y+3, r18	; 0x03
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	d1 f0       	breq	.+52     	; 0x1db6 <GPIO_readPort+0x5e>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <GPIO_readPort+0x3e>
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <GPIO_readPort+0x54>
    1d94:	1e c0       	rjmp	.+60     	; 0x1dd2 <GPIO_readPort+0x7a>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	81 f0       	breq	.+32     	; 0x1dc0 <GPIO_readPort+0x68>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	81 f0       	breq	.+32     	; 0x1dca <GPIO_readPort+0x72>
    1daa:	13 c0       	rjmp	.+38     	; 0x1dd2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dac:	e9 e3       	ldi	r30, 0x39	; 57
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1db6:	e6 e3       	ldi	r30, 0x36	; 54
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dc0:	e3 e3       	ldi	r30, 0x33	; 51
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dca:	e0 e3       	ldi	r30, 0x30	; 48
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <PWM_Timer0_Start>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle)
{
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1df2:	e2 e5       	ldi	r30, 0x52	; 82
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	10 82       	st	Z, r1

	OCR0  = (uint8)(((float32)duty_cycle / 100) * 255); // Set Compare Value
    1df8:	0c e5       	ldi	r16, 0x5C	; 92
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a0 e0       	ldi	r26, 0x00	; 0
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	48 ec       	ldi	r20, 0xC8	; 200
    1e1c:	52 e4       	ldi	r21, 0x42	; 66
    1e1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	53 e4       	ldi	r21, 0x43	; 67
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	f8 01       	movw	r30, r16
    1e48:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1e54:	e3 e5       	ldi	r30, 0x53	; 83
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a e6       	ldi	r24, 0x6A	; 106
    1e5a:	80 83       	st	Z, r24
}
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1e68:	1f 92       	push	r1
    1e6a:	0f 92       	push	r0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	2f 93       	push	r18
    1e74:	3f 93       	push	r19
    1e76:	4f 93       	push	r20
    1e78:	5f 93       	push	r21
    1e7a:	6f 93       	push	r22
    1e7c:	7f 93       	push	r23
    1e7e:	8f 93       	push	r24
    1e80:	9f 93       	push	r25
    1e82:	af 93       	push	r26
    1e84:	bf 93       	push	r27
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e92:	80 91 7b 01 	lds	r24, 0x017B
    1e96:	90 91 7c 01 	lds	r25, 0x017C
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match */
		(*g_callBackPtr)();
    1e9e:	e0 91 7b 01 	lds	r30, 0x017B
    1ea2:	f0 91 7c 01 	lds	r31, 0x017C
    1ea6:	09 95       	icall
	}
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	ff 91       	pop	r31
    1eae:	ef 91       	pop	r30
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	7f 91       	pop	r23
    1eba:	6f 91       	pop	r22
    1ebc:	5f 91       	pop	r21
    1ebe:	4f 91       	pop	r20
    1ec0:	3f 91       	pop	r19
    1ec2:	2f 91       	pop	r18
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	0f 90       	pop	r0
    1eca:	1f 90       	pop	r1
    1ecc:	18 95       	reti

00001ece <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1ece:	1f 92       	push	r1
    1ed0:	0f 92       	push	r0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	2f 93       	push	r18
    1eda:	3f 93       	push	r19
    1edc:	4f 93       	push	r20
    1ede:	5f 93       	push	r21
    1ee0:	6f 93       	push	r22
    1ee2:	7f 93       	push	r23
    1ee4:	8f 93       	push	r24
    1ee6:	9f 93       	push	r25
    1ee8:	af 93       	push	r26
    1eea:	bf 93       	push	r27
    1eec:	ef 93       	push	r30
    1eee:	ff 93       	push	r31
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ef8:	80 91 7b 01 	lds	r24, 0x017B
    1efc:	90 91 7c 01 	lds	r25, 0x017C
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	29 f0       	breq	.+10     	; 0x1f0e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the counter overflow */
		(*g_callBackPtr)();
    1f04:	e0 91 7b 01 	lds	r30, 0x017B
    1f08:	f0 91 7c 01 	lds	r31, 0x017C
    1f0c:	09 95       	icall
	}
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <Timer1_init+0x6>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR1A Register:
	 * COM1A1 = 0, COM1A0 = 0, COM1B1 = 0, COM1B0 = 0 (Normal port operation, OC1A/OC1B disconnected.)
	 * FOC1A = 1, FOC1B = 1 (specifies a non-PWM mode)
	 * WGM10 = 0, WGM11 = 0 (either in normal or compare mode )*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f42:	ef e4       	ldi	r30, 0x4F	; 79
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8c e0       	ldi	r24, 0x0C	; 12
    1f48:	80 83       	st	Z, r24
	 * ICNC1 = 0 (deactivates the Input Capture Noise Canceler)
	 * ICES1 = 0 (not used)
	 * CS10, CS11, CS12 (based on timer1 prescaler configuration)*/

	/*insert the required clock value in the first three bits (CS10, CS11 and CS12)*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1f4a:	ae e4       	ldi	r26, 0x4E	; 78
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	ee e4       	ldi	r30, 0x4E	; 78
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	98 2f       	mov	r25, r24
    1f56:	98 7f       	andi	r25, 0xF8	; 248
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	84 81       	ldd	r24, Z+4	; 0x04
    1f5e:	89 2b       	or	r24, r25
    1f60:	8c 93       	st	X, r24

	/*insert the required mode in WGM12 bit in TCCR1B Register*/
	TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<3);
    1f62:	ae e4       	ldi	r26, 0x4E	; 78
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ee e4       	ldi	r30, 0x4E	; 78
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	27 7f       	andi	r18, 0xF7	; 247
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	85 81       	ldd	r24, Z+5	; 0x05
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	82 2b       	or	r24, r18
    1f88:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->initial_value;
    1f8a:	ac e4       	ldi	r26, 0x4C	; 76
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	11 96       	adiw	r26, 0x01	; 1
    1f98:	9c 93       	st	X, r25
    1f9a:	8e 93       	st	-X, r24

	/* Compare Value for Timer1 in CTC mode*/
	if(Config_Ptr->mode == CTC)
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	85 81       	ldd	r24, Z+5	; 0x05
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	89 f4       	brne	.+34     	; 0x1fc8 <Timer1_init+0x94>
	{
		/* Compare Value for Timer1 in CTC mode*/
		OCR1A = Config_Ptr->compare_value;
    1fa6:	aa e4       	ldi	r26, 0x4A	; 74
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e9 81       	ldd	r30, Y+1	; 0x01
    1fac:	fa 81       	ldd	r31, Y+2	; 0x02
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	11 96       	adiw	r26, 0x01	; 1
    1fb4:	9c 93       	st	X, r25
    1fb6:	8e 93       	st	-X, r24
		/* Enable the Output Compare A Match Interrupt */
		TIMSK |= (1<<OCIE1A);
    1fb8:	a9 e5       	ldi	r26, 0x59	; 89
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e9 e5       	ldi	r30, 0x59	; 89
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 61       	ori	r24, 0x10	; 16
    1fc4:	8c 93       	st	X, r24
    1fc6:	0c c0       	rjmp	.+24     	; 0x1fe0 <Timer1_init+0xac>
	}
	else if(Config_Ptr->mode == NORMAL)
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	85 81       	ldd	r24, Z+5	; 0x05
    1fce:	88 23       	and	r24, r24
    1fd0:	39 f4       	brne	.+14     	; 0x1fe0 <Timer1_init+0xac>
	{
		/* Enable the Overflow Interrupt */
		TIMSK |= (1<<TOIE1);
    1fd2:	a9 e5       	ldi	r26, 0x59	; 89
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 e5       	ldi	r30, 0x59	; 89
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	8c 93       	st	X, r24
	}

	/*Enable the I-bit*/
	SREG |= (1<<7);
    1fe0:	af e5       	ldi	r26, 0x5F	; 95
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	ef e5       	ldi	r30, 0x5F	; 95
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	8c 93       	st	X, r24
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    2000:	ef e4       	ldi	r30, 0x4F	; 79
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	10 82       	st	Z, r1
	TCCR1B = 0;
    2006:	ee e4       	ldi	r30, 0x4E	; 78
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	10 82       	st	Z, r1
	TCNT1 = 0;
    200c:	ec e4       	ldi	r30, 0x4C	; 76
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	11 82       	std	Z+1, r1	; 0x01
    2012:	10 82       	st	Z, r1
	OCR1A = 0;
    2014:	ea e4       	ldi	r30, 0x4A	; 74
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	11 82       	std	Z+1, r1	; 0x01
    201a:	10 82       	st	Z, r1

	/* Disable the output compare A match and overflow interrupt */
	TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    201c:	a9 e5       	ldi	r26, 0x59	; 89
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e9 e5       	ldi	r30, 0x59	; 89
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8b 7e       	andi	r24, 0xEB	; 235
    2028:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    202a:	10 92 7c 01 	sts	0x017C, r1
    202e:	10 92 7b 01 	sts	0x017B, r1

	/* Disable the i-bit */
	SREG &= ~(1<<7);
    2032:	af e5       	ldi	r26, 0x5F	; 95
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ef e5       	ldi	r30, 0x5F	; 95
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8f 77       	andi	r24, 0x7F	; 127
    203e:	8c 93       	st	X, r24
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <Timer1_setCallBack+0x6>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	90 93 7c 01 	sts	0x017C, r25
    205c:	80 93 7b 01 	sts	0x017B, r24
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>
#include <math.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <TWI_init+0x12>
    207c:	00 d0       	rcall	.+0      	; 0x207e <TWI_init+0x14>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = 0x00;
    2086:	e1 e2       	ldi	r30, 0x21	; 33
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	10 82       	st	Z, r1
	uint8 twps = 0,c=1; /*c = 4^TWPS*/
    208c:	1a 82       	std	Y+2, r1	; 0x02
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
	if(BIT_IS_SET(TWSR,0)) /*starting to calculate the prescalar value to calculate the value of (4 ^ TWPS)*/
    2092:	e1 e2       	ldi	r30, 0x21	; 33
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	81 70       	andi	r24, 0x01	; 1
    209e:	90 70       	andi	r25, 0x00	; 0
    20a0:	88 23       	and	r24, r24
    20a2:	19 f0       	breq	.+6      	; 0x20aa <TWI_init+0x40>
	{
		twps+=1;
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(BIT_IS_SET(TWSR,1))
    20aa:	e1 e2       	ldi	r30, 0x21	; 33
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	82 70       	andi	r24, 0x02	; 2
    20b6:	90 70       	andi	r25, 0x00	; 0
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	79 f0       	breq	.+30     	; 0x20da <TWI_init+0x70>
	{
		twps+=2;
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	8e 5f       	subi	r24, 0xFE	; 254
    20c0:	8a 83       	std	Y+2, r24	; 0x02
    20c2:	0b c0       	rjmp	.+22     	; 0x20da <TWI_init+0x70>
	}
	while(twps!=0)
	{
		c*=4;
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	89 83       	std	Y+1, r24	; 0x01
		twps--;
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	81 50       	subi	r24, 0x01	; 1
    20d8:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(BIT_IS_SET(TWSR,1))
	{
		twps+=2;
	}
	while(twps!=0)
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	88 23       	and	r24, r24
    20de:	91 f7       	brne	.-28     	; 0x20c4 <TWI_init+0x5a>
	{
		c*=4;
		twps--;
	}
	TWBR = (uint8)(((F_CPU / (Config_Ptr->bit_rate)) - 16) / (2 * c));
    20e0:	cc 24       	eor	r12, r12
    20e2:	dd 24       	eor	r13, r13
    20e4:	68 94       	set
    20e6:	c5 f8       	bld	r12, 5
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	21 81       	ldd	r18, Z+1	; 0x01
    20ee:	32 81       	ldd	r19, Z+2	; 0x02
    20f0:	43 81       	ldd	r20, Z+3	; 0x03
    20f2:	54 81       	ldd	r21, Z+4	; 0x04
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	92 e1       	ldi	r25, 0x12	; 18
    20f8:	aa e7       	ldi	r26, 0x7A	; 122
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__udivmodsi4>
    2104:	da 01       	movw	r26, r20
    2106:	c9 01       	movw	r24, r18
    2108:	0f 2e       	mov	r0, r31
    210a:	f0 ef       	ldi	r31, 0xF0	; 240
    210c:	ef 2e       	mov	r14, r31
    210e:	ff ef       	ldi	r31, 0xFF	; 255
    2110:	ff 2e       	mov	r15, r31
    2112:	ff ef       	ldi	r31, 0xFF	; 255
    2114:	0f 2f       	mov	r16, r31
    2116:	ff ef       	ldi	r31, 0xFF	; 255
    2118:	1f 2f       	mov	r17, r31
    211a:	f0 2d       	mov	r31, r0
    211c:	e8 0e       	add	r14, r24
    211e:	f9 1e       	adc	r15, r25
    2120:	0a 1f       	adc	r16, r26
    2122:	1b 1f       	adc	r17, r27
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	9c 01       	movw	r18, r24
    2130:	44 27       	eor	r20, r20
    2132:	37 fd       	sbrc	r19, 7
    2134:	40 95       	com	r20
    2136:	54 2f       	mov	r21, r20
    2138:	c8 01       	movw	r24, r16
    213a:	b7 01       	movw	r22, r14
    213c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__udivmodsi4>
    2140:	da 01       	movw	r26, r20
    2142:	c9 01       	movw	r24, r18
    2144:	f6 01       	movw	r30, r12
    2146:	80 83       	st	Z, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = ((Config_Ptr->address)<<1) & (0xFE); // my address = 0x01 :)
    2148:	a2 e2       	ldi	r26, 0x22	; 34
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	eb 81       	ldd	r30, Y+3	; 0x03
    214e:	fc 81       	ldd	r31, Y+4	; 0x04
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    215c:	e6 e5       	ldi	r30, 0x56	; 86
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	80 83       	st	Z, r24
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	08 95       	ret

0000217e <TWI_start>:

void TWI_start(void)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2186:	e6 e5       	ldi	r30, 0x56	; 86
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	84 ea       	ldi	r24, 0xA4	; 164
    218c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    218e:	e6 e5       	ldi	r30, 0x56	; 86
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 23       	and	r24, r24
    2196:	dc f7       	brge	.-10     	; 0x218e <TWI_start+0x10>
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <TWI_stop>:

void TWI_stop(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	84 e9       	ldi	r24, 0x94	; 148
    21ac:	80 83       	st	Z, r24
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    21c0:	e3 e2       	ldi	r30, 0x23	; 35
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 e8       	ldi	r24, 0x84	; 132
    21ce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21d0:	e6 e5       	ldi	r30, 0x56	; 86
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	dc f7       	brge	.-10     	; 0x21d0 <TWI_writeByte+0x1c>
}
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    21ea:	e6 e5       	ldi	r30, 0x56	; 86
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	84 ec       	ldi	r24, 0xC4	; 196
    21f0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21f2:	e6 e5       	ldi	r30, 0x56	; 86
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 23       	and	r24, r24
    21fa:	dc f7       	brge	.-10     	; 0x21f2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    21fc:	e3 e2       	ldi	r30, 0x23	; 35
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
}
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2210:	e6 e5       	ldi	r30, 0x56	; 86
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	84 e8       	ldi	r24, 0x84	; 132
    2216:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2218:	e6 e5       	ldi	r30, 0x56	; 86
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	88 23       	and	r24, r24
    2220:	dc f7       	brge	.-10     	; 0x2218 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2222:	e3 e2       	ldi	r30, 0x23	; 35
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2238:	e1 e2       	ldi	r30, 0x21	; 33
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	88 7f       	andi	r24, 0xF8	; 248
    2240:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
}
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <UART_init+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <UART_init+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    225c:	1a 82       	std	Y+2, r1	; 0x02
    225e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2260:	eb e2       	ldi	r30, 0x2B	; 43
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2268:	ea e2       	ldi	r30, 0x2A	; 42
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	88 e1       	ldi	r24, 0x18	; 24
    226e:	80 83       	st	Z, r24
	if(BIT_IS_SET(Config_Ptr->bit_data,2))
    2270:	eb 81       	ldd	r30, Y+3	; 0x03
    2272:	fc 81       	ldd	r31, Y+4	; 0x04
    2274:	80 81       	ld	r24, Z
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	84 70       	andi	r24, 0x04	; 4
    227c:	90 70       	andi	r25, 0x00	; 0
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	39 f0       	breq	.+14     	; 0x2290 <UART_init+0x44>
	{
		UCSRB |= (1<<UCSZ2);
    2282:	aa e2       	ldi	r26, 0x2A	; 42
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ea e2       	ldi	r30, 0x2A	; 42
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	84 60       	ori	r24, 0x04	; 4
    228e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2290:	e0 e4       	ldi	r30, 0x40	; 64
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 e8       	ldi	r24, 0x80	; 128
    2296:	80 83       	st	Z, r24
	if(BIT_IS_SET(Config_Ptr->bit_data,1))
    2298:	eb 81       	ldd	r30, Y+3	; 0x03
    229a:	fc 81       	ldd	r31, Y+4	; 0x04
    229c:	80 81       	ld	r24, Z
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	82 70       	andi	r24, 0x02	; 2
    22a4:	90 70       	andi	r25, 0x00	; 0
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	39 f0       	breq	.+14     	; 0x22b8 <UART_init+0x6c>
	{
		UCSRC |= (1<<UCSZ1);
    22aa:	a0 e4       	ldi	r26, 0x40	; 64
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e0 e4       	ldi	r30, 0x40	; 64
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	84 60       	ori	r24, 0x04	; 4
    22b6:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->bit_data,0))
    22b8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ba:	fc 81       	ldd	r31, Y+4	; 0x04
    22bc:	80 81       	ld	r24, Z
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	81 70       	andi	r24, 0x01	; 1
    22c4:	90 70       	andi	r25, 0x00	; 0
    22c6:	88 23       	and	r24, r24
    22c8:	39 f0       	breq	.+14     	; 0x22d8 <UART_init+0x8c>
	{
		UCSRC |= (1<<UCSZ0);
    22ca:	a0 e4       	ldi	r26, 0x40	; 64
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e0 e4       	ldi	r30, 0x40	; 64
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	82 60       	ori	r24, 0x02	; 2
    22d6:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->parity,1))
    22d8:	eb 81       	ldd	r30, Y+3	; 0x03
    22da:	fc 81       	ldd	r31, Y+4	; 0x04
    22dc:	81 81       	ldd	r24, Z+1	; 0x01
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	82 70       	andi	r24, 0x02	; 2
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	39 f0       	breq	.+14     	; 0x22f8 <UART_init+0xac>
	{
		UCSRC |= (1<<UPM1);
    22ea:	a0 e4       	ldi	r26, 0x40	; 64
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e0 e4       	ldi	r30, 0x40	; 64
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 62       	ori	r24, 0x20	; 32
    22f6:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->parity,0))
    22f8:	eb 81       	ldd	r30, Y+3	; 0x03
    22fa:	fc 81       	ldd	r31, Y+4	; 0x04
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	81 70       	andi	r24, 0x01	; 1
    2304:	90 70       	andi	r25, 0x00	; 0
    2306:	88 23       	and	r24, r24
    2308:	39 f0       	breq	.+14     	; 0x2318 <UART_init+0xcc>
	{
		UCSRC |= (1<<UPM0);
    230a:	a0 e4       	ldi	r26, 0x40	; 64
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e0 e4       	ldi	r30, 0x40	; 64
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 61       	ori	r24, 0x10	; 16
    2316:	8c 93       	st	X, r24
	}
	if(Config_Ptr->stop_bit == BIT2)
    2318:	eb 81       	ldd	r30, Y+3	; 0x03
    231a:	fc 81       	ldd	r31, Y+4	; 0x04
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	39 f4       	brne	.+14     	; 0x2330 <UART_init+0xe4>
	{
		UCSRC |= (1<<USBS);
    2322:	a0 e4       	ldi	r26, 0x40	; 64
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e0 e4       	ldi	r30, 0x40	; 64
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	88 60       	ori	r24, 0x08	; 8
    232e:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2330:	eb 81       	ldd	r30, Y+3	; 0x03
    2332:	fc 81       	ldd	r31, Y+4	; 0x04
    2334:	83 81       	ldd	r24, Z+3	; 0x03
    2336:	94 81       	ldd	r25, Z+4	; 0x04
    2338:	a5 81       	ldd	r26, Z+5	; 0x05
    233a:	b6 81       	ldd	r27, Z+6	; 0x06
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	aa 1f       	adc	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	aa 1f       	adc	r26, r26
    234a:	bb 1f       	adc	r27, r27
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	aa 1f       	adc	r26, r26
    2352:	bb 1f       	adc	r27, r27
    2354:	9c 01       	movw	r18, r24
    2356:	ad 01       	movw	r20, r26
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	92 e1       	ldi	r25, 0x12	; 18
    235c:	aa e7       	ldi	r26, 0x7A	; 122
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__udivmodsi4>
    2368:	da 01       	movw	r26, r20
    236a:	c9 01       	movw	r24, r18
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2372:	e0 e4       	ldi	r30, 0x40	; 64
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	89 2f       	mov	r24, r25
    237c:	99 27       	eor	r25, r25
    237e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2380:	e9 e2       	ldi	r30, 0x29	; 41
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	80 83       	st	Z, r24
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23a2:	eb e2       	ldi	r30, 0x2B	; 43
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	80 72       	andi	r24, 0x20	; 32
    23ae:	90 70       	andi	r25, 0x00	; 0
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	b9 f3       	breq	.-18     	; 0x23a2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23b4:	ec e2       	ldi	r30, 0x2C	; 44
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23cc:	eb e2       	ldi	r30, 0x2B	; 43
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	88 23       	and	r24, r24
    23d4:	dc f7       	brge	.-10     	; 0x23cc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    23d6:	ec e2       	ldi	r30, 0x2C	; 44
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <UART_sendString+0x6>
    23e8:	0f 92       	push	r0
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	9b 83       	std	Y+3, r25	; 0x03
    23f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23f2:	19 82       	std	Y+1, r1	; 0x01
    23f4:	0e c0       	rjmp	.+28     	; 0x2412 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	fc 01       	movw	r30, r24
    2402:	e2 0f       	add	r30, r18
    2404:	f3 1f       	adc	r31, r19
    2406:	80 81       	ld	r24, Z
    2408:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
		i++;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	fc 01       	movw	r30, r24
    241e:	e2 0f       	add	r30, r18
    2420:	f3 1f       	adc	r31, r19
    2422:	80 81       	ld	r24, Z
    2424:	88 23       	and	r24, r24
    2426:	39 f7       	brne	.-50     	; 0x23f6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <UART_receiveString+0xa>
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2448:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	9b 81       	ldd	r25, Y+3	; 0x03
    2454:	8c 01       	movw	r16, r24
    2456:	02 0f       	add	r16, r18
    2458:	13 1f       	adc	r17, r19
    245a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    245e:	f8 01       	movw	r30, r16
    2460:	80 83       	st	Z, r24
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	8c 01       	movw	r16, r24
    2476:	02 0f       	add	r16, r18
    2478:	13 1f       	adc	r17, r19
    247a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    247e:	f8 01       	movw	r30, r16
    2480:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	9b 81       	ldd	r25, Y+3	; 0x03
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f3 1f       	adc	r31, r19
    2492:	80 81       	ld	r24, Z
    2494:	83 32       	cpi	r24, 0x23	; 35
    2496:	31 f7       	brne	.-52     	; 0x2464 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	fc 01       	movw	r30, r24
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	10 82       	st	Z, r1
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <__udivmodsi4>:
    24ba:	a1 e2       	ldi	r26, 0x21	; 33
    24bc:	1a 2e       	mov	r1, r26
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	fd 01       	movw	r30, r26
    24c4:	0d c0       	rjmp	.+26     	; 0x24e0 <__udivmodsi4_ep>

000024c6 <__udivmodsi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	ee 1f       	adc	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	a2 17       	cp	r26, r18
    24d0:	b3 07       	cpc	r27, r19
    24d2:	e4 07       	cpc	r30, r20
    24d4:	f5 07       	cpc	r31, r21
    24d6:	20 f0       	brcs	.+8      	; 0x24e0 <__udivmodsi4_ep>
    24d8:	a2 1b       	sub	r26, r18
    24da:	b3 0b       	sbc	r27, r19
    24dc:	e4 0b       	sbc	r30, r20
    24de:	f5 0b       	sbc	r31, r21

000024e0 <__udivmodsi4_ep>:
    24e0:	66 1f       	adc	r22, r22
    24e2:	77 1f       	adc	r23, r23
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	1a 94       	dec	r1
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <__udivmodsi4_loop>
    24ec:	60 95       	com	r22
    24ee:	70 95       	com	r23
    24f0:	80 95       	com	r24
    24f2:	90 95       	com	r25
    24f4:	9b 01       	movw	r18, r22
    24f6:	ac 01       	movw	r20, r24
    24f8:	bd 01       	movw	r22, r26
    24fa:	cf 01       	movw	r24, r30
    24fc:	08 95       	ret

000024fe <__prologue_saves__>:
    24fe:	2f 92       	push	r2
    2500:	3f 92       	push	r3
    2502:	4f 92       	push	r4
    2504:	5f 92       	push	r5
    2506:	6f 92       	push	r6
    2508:	7f 92       	push	r7
    250a:	8f 92       	push	r8
    250c:	9f 92       	push	r9
    250e:	af 92       	push	r10
    2510:	bf 92       	push	r11
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	ca 1b       	sub	r28, r26
    2528:	db 0b       	sbc	r29, r27
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	09 94       	ijmp

00002536 <__epilogue_restores__>:
    2536:	2a 88       	ldd	r2, Y+18	; 0x12
    2538:	39 88       	ldd	r3, Y+17	; 0x11
    253a:	48 88       	ldd	r4, Y+16	; 0x10
    253c:	5f 84       	ldd	r5, Y+15	; 0x0f
    253e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2540:	7d 84       	ldd	r7, Y+13	; 0x0d
    2542:	8c 84       	ldd	r8, Y+12	; 0x0c
    2544:	9b 84       	ldd	r9, Y+11	; 0x0b
    2546:	aa 84       	ldd	r10, Y+10	; 0x0a
    2548:	b9 84       	ldd	r11, Y+9	; 0x09
    254a:	c8 84       	ldd	r12, Y+8	; 0x08
    254c:	df 80       	ldd	r13, Y+7	; 0x07
    254e:	ee 80       	ldd	r14, Y+6	; 0x06
    2550:	fd 80       	ldd	r15, Y+5	; 0x05
    2552:	0c 81       	ldd	r16, Y+4	; 0x04
    2554:	1b 81       	ldd	r17, Y+3	; 0x03
    2556:	aa 81       	ldd	r26, Y+2	; 0x02
    2558:	b9 81       	ldd	r27, Y+1	; 0x01
    255a:	ce 0f       	add	r28, r30
    255c:	d1 1d       	adc	r29, r1
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	ed 01       	movw	r28, r26
    256a:	08 95       	ret

0000256c <_exit>:
    256c:	f8 94       	cli

0000256e <__stop_program>:
    256e:	ff cf       	rjmp	.-2      	; 0x256e <__stop_program>
