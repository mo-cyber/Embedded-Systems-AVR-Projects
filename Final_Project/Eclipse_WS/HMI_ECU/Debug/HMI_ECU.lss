
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00003a2c  00003ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800102  00800102  00003b62  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  00003b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b8  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bead  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c67b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a8 1c 	jmp	0x3950	; 0x3950 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void openDoor(void);
void lockSystem(void);


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e7 97       	sbiw	r28, 0x37	; 55
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * at the beginning of the application.
	 * - the second variable is the option variable and it has the chosen main option
	 * by the user either to open the door or to change the password.
	 * - the third variable is the passCheck and this variable it to check if the
	 * entered password is right (PASS) or wrong (FAIL)*/
	uint8 status = FAIL, option, passCheck;
     b5a:	18 a2       	std	Y+32, r1	; 0x20
	/*Initialization of needed drivers as LCD, UART and Timer1*/
	LCD_init();
     b5c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <LCD_init>
	UART_ConfigType UART_Configurations = {BIT8,DISABLED,BIT1,9600};
     b60:	ce 01       	movw	r24, r28
     b62:	81 96       	adiw	r24, 0x21	; 33
     b64:	9f a7       	std	Y+47, r25	; 0x2f
     b66:	8e a7       	std	Y+46, r24	; 0x2e
     b68:	eb ef       	ldi	r30, 0xFB	; 251
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	f9 ab       	std	Y+49, r31	; 0x31
     b6e:	e8 ab       	std	Y+48, r30	; 0x30
     b70:	f7 e0       	ldi	r31, 0x07	; 7
     b72:	fa ab       	std	Y+50, r31	; 0x32
     b74:	e8 a9       	ldd	r30, Y+48	; 0x30
     b76:	f9 a9       	ldd	r31, Y+49	; 0x31
     b78:	00 80       	ld	r0, Z
     b7a:	88 a9       	ldd	r24, Y+48	; 0x30
     b7c:	99 a9       	ldd	r25, Y+49	; 0x31
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	99 ab       	std	Y+49, r25	; 0x31
     b82:	88 ab       	std	Y+48, r24	; 0x30
     b84:	ee a5       	ldd	r30, Y+46	; 0x2e
     b86:	ff a5       	ldd	r31, Y+47	; 0x2f
     b88:	00 82       	st	Z, r0
     b8a:	8e a5       	ldd	r24, Y+46	; 0x2e
     b8c:	9f a5       	ldd	r25, Y+47	; 0x2f
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	9f a7       	std	Y+47, r25	; 0x2f
     b92:	8e a7       	std	Y+46, r24	; 0x2e
     b94:	9a a9       	ldd	r25, Y+50	; 0x32
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	9a ab       	std	Y+50, r25	; 0x32
     b9a:	ea a9       	ldd	r30, Y+50	; 0x32
     b9c:	ee 23       	and	r30, r30
     b9e:	51 f7       	brne	.-44     	; 0xb74 <main+0x2e>
	UART_init(&UART_Configurations);
     ba0:	ce 01       	movw	r24, r28
     ba2:	81 96       	adiw	r24, 0x21	; 33
     ba4:	0e 94 3f 1b 	call	0x367e	; 0x367e <UART_init>
	Timer1_ConfigType Timer1_Configurations = {0,0,PRESCALING_1024,CTC};
     ba8:	ce 01       	movw	r24, r28
     baa:	88 96       	adiw	r24, 0x28	; 40
     bac:	9c ab       	std	Y+52, r25	; 0x34
     bae:	8b ab       	std	Y+51, r24	; 0x33
     bb0:	e5 ef       	ldi	r30, 0xF5	; 245
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	fe ab       	std	Y+54, r31	; 0x36
     bb6:	ed ab       	std	Y+53, r30	; 0x35
     bb8:	f6 e0       	ldi	r31, 0x06	; 6
     bba:	ff ab       	std	Y+55, r31	; 0x37
     bbc:	ed a9       	ldd	r30, Y+53	; 0x35
     bbe:	fe a9       	ldd	r31, Y+54	; 0x36
     bc0:	00 80       	ld	r0, Z
     bc2:	8d a9       	ldd	r24, Y+53	; 0x35
     bc4:	9e a9       	ldd	r25, Y+54	; 0x36
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	9e ab       	std	Y+54, r25	; 0x36
     bca:	8d ab       	std	Y+53, r24	; 0x35
     bcc:	eb a9       	ldd	r30, Y+51	; 0x33
     bce:	fc a9       	ldd	r31, Y+52	; 0x34
     bd0:	00 82       	st	Z, r0
     bd2:	8b a9       	ldd	r24, Y+51	; 0x33
     bd4:	9c a9       	ldd	r25, Y+52	; 0x34
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	9c ab       	std	Y+52, r25	; 0x34
     bda:	8b ab       	std	Y+51, r24	; 0x33
     bdc:	9f a9       	ldd	r25, Y+55	; 0x37
     bde:	91 50       	subi	r25, 0x01	; 1
     be0:	9f ab       	std	Y+55, r25	; 0x37
     be2:	ef a9       	ldd	r30, Y+55	; 0x37
     be4:	ee 23       	and	r30, r30
     be6:	51 f7       	brne	.-44     	; 0xbbc <main+0x76>

	while(1)
	{
		/*The first condition is if the status FAIL it will ask the user to enter the
		 *  passwords but if it is PASS it will go to the main option.*/
		if(status == FAIL)
     be8:	88 a1       	ldd	r24, Y+32	; 0x20
     bea:	88 23       	and	r24, r24
     bec:	31 f4       	brne	.+12     	; 0xbfa <main+0xb4>
		{
			enterPass();
     bee:	0e 94 28 07 	call	0xe50	; 0xe50 <enterPass>
			status = UART_recieveByte();
     bf2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <UART_recieveByte>
     bf6:	88 a3       	std	Y+32, r24	; 0x20
     bf8:	f7 cf       	rjmp	.-18     	; 0xbe8 <main+0xa2>
		}
		else if(status == PASS)
     bfa:	88 a1       	ldd	r24, Y+32	; 0x20
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	a1 f7       	brne	.-24     	; 0xbe8 <main+0xa2>
		{
			option = mainOptions();
     c00:	0e 94 94 09 	call	0x1328	; 0x1328 <mainOptions>
     c04:	8f 8f       	std	Y+31, r24	; 0x1f
			UART_sendByte(option);
     c06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c08:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
			uint8 counter = 4;
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8d 8f       	std	Y+29, r24	; 0x1d
			/* - This loop is to ask the user for the passwords 3 times if the entered
			 * password is wrong but if the passCheck is PASS it will break
			 * the loop and starts to apply the chosen option.
			 * - After each loop the HMI ECU sends a ready byte to the Control ECU
			 * to keep both of them in the same loop.*/
			for(counter = 0; counter < 3; counter++)
     c10:	1d 8e       	std	Y+29, r1	; 0x1d
     c12:	97 c0       	rjmp	.+302    	; 0xd42 <main+0x1fc>
			{
				checkPass();
     c14:	0e 94 ad 09 	call	0x135a	; 0x135a <checkPass>
				passCheck = UART_recieveByte();
     c18:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <UART_recieveByte>
     c1c:	8e 8f       	std	Y+30, r24	; 0x1e
				if(passCheck == PASS)
     c1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	09 f0       	breq	.+2      	; 0xc26 <main+0xe0>
     c24:	88 c0       	rjmp	.+272    	; 0xd36 <main+0x1f0>
				{
					if(option == '-')
     c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c28:	8d 32       	cpi	r24, 0x2D	; 45
     c2a:	11 f4       	brne	.+4      	; 0xc30 <main+0xea>
					{
						status = FAIL;
     c2c:	18 a2       	std	Y+32, r1	; 0x20
     c2e:	8d c0       	rjmp	.+282    	; 0xd4a <main+0x204>
					}
					else if (option == '+')
     c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c32:	8b 32       	cpi	r24, 0x2B	; 43
     c34:	09 f0       	breq	.+2      	; 0xc38 <main+0xf2>
     c36:	89 c0       	rjmp	.+274    	; 0xd4a <main+0x204>
					{
						Timer1_init(&Timer1_Configurations);
     c38:	ce 01       	movw	r24, r28
     c3a:	88 96       	adiw	r24, 0x28	; 40
     c3c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <Timer1_init>
						Timer1_setCallBack(openDoor);
     c40:	81 e7       	ldi	r24, 0x71	; 113
     c42:	9a e0       	ldi	r25, 0x0A	; 10
     c44:	0e 94 2d 1b 	call	0x365a	; 0x365a <Timer1_setCallBack>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e8       	ldi	r26, 0x80	; 128
     c4e:	bf e3       	ldi	r27, 0x3F	; 63
     c50:	89 8f       	std	Y+25, r24	; 0x19
     c52:	9a 8f       	std	Y+26, r25	; 0x1a
     c54:	ab 8f       	std	Y+27, r26	; 0x1b
     c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c58:	69 8d       	ldd	r22, Y+25	; 0x19
     c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a ef       	ldi	r20, 0xFA	; 250
     c66:	54 e4       	ldi	r21, 0x44	; 68
     c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8d 8b       	std	Y+21, r24	; 0x15
     c72:	9e 8b       	std	Y+22, r25	; 0x16
     c74:	af 8b       	std	Y+23, r26	; 0x17
     c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c78:	6d 89       	ldd	r22, Y+21	; 0x15
     c7a:	7e 89       	ldd	r23, Y+22	; 0x16
     c7c:	8f 89       	ldd	r24, Y+23	; 0x17
     c7e:	98 8d       	ldd	r25, Y+24	; 0x18
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8c:	88 23       	and	r24, r24
     c8e:	2c f4       	brge	.+10     	; 0xc9a <main+0x154>
		__ticks = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	8b 8b       	std	Y+19, r24	; 0x13
     c98:	3f c0       	rjmp	.+126    	; 0xd18 <main+0x1d2>
	else if (__tmp > 65535)
     c9a:	6d 89       	ldd	r22, Y+21	; 0x15
     c9c:	7e 89       	ldd	r23, Y+22	; 0x16
     c9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ca0:	98 8d       	ldd	r25, Y+24	; 0x18
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cae:	18 16       	cp	r1, r24
     cb0:	4c f5       	brge	.+82     	; 0xd04 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb2:	69 8d       	ldd	r22, Y+25	; 0x19
     cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e2       	ldi	r20, 0x20	; 32
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	bc 01       	movw	r22, r24
     ccc:	cd 01       	movw	r24, r26
     cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9c 8b       	std	Y+20, r25	; 0x14
     cd8:	8b 8b       	std	Y+19, r24	; 0x13
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <main+0x1b4>
     cdc:	88 ec       	ldi	r24, 0xC8	; 200
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	9a 89       	ldd	r25, Y+18	; 0x12
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <main+0x1a2>
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	9c 8b       	std	Y+20, r25	; 0x14
     cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	8b 89       	ldd	r24, Y+19	; 0x13
     cfc:	9c 89       	ldd	r25, Y+20	; 0x14
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f7       	brne	.-38     	; 0xcdc <main+0x196>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d04:	6d 89       	ldd	r22, Y+21	; 0x15
     d06:	7e 89       	ldd	r23, Y+22	; 0x16
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9c 8b       	std	Y+20, r25	; 0x14
     d16:	8b 8b       	std	Y+19, r24	; 0x13
     d18:	8b 89       	ldd	r24, Y+19	; 0x13
     d1a:	9c 89       	ldd	r25, Y+20	; 0x14
     d1c:	98 8b       	std	Y+16, r25	; 0x10
     d1e:	8f 87       	std	Y+15, r24	; 0x0f
     d20:	8f 85       	ldd	r24, Y+15	; 0x0f
     d22:	98 89       	ldd	r25, Y+16	; 0x10
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <main+0x1de>
     d28:	98 8b       	std	Y+16, r25	; 0x10
     d2a:	8f 87       	std	Y+15, r24	; 0x0f
						/*This 1ms delay is to freeze the CPU until it access the
						 * call back function and increment the g_tick.*/
						_delay_ms(1);
						/*This while loop is to wait until call back function finish
						 * as it will put the g_tick = 0 again at the end of the function.*/
						while(g_tick != 0);
     d2c:	80 91 02 01 	lds	r24, 0x0102
     d30:	88 23       	and	r24, r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <main+0x1e6>
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <main+0x204>
					}
					break;
				}
				UART_sendByte(ECU_READY);
     d36:	88 e7       	ldi	r24, 0x78	; 120
     d38:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
			/* - This loop is to ask the user for the passwords 3 times if the entered
			 * password is wrong but if the passCheck is PASS it will break
			 * the loop and starts to apply the chosen option.
			 * - After each loop the HMI ECU sends a ready byte to the Control ECU
			 * to keep both of them in the same loop.*/
			for(counter = 0; counter < 3; counter++)
     d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	8d 8f       	std	Y+29, r24	; 0x1d
     d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	08 f4       	brcc	.+2      	; 0xd4a <main+0x204>
     d48:	65 cf       	rjmp	.-310    	; 0xc14 <main+0xce>
				UART_sendByte(ECU_READY);
			}
			/*If counter = 3 means that the previous for loop finished all
			 * without passing the passCheck so here it will call the lockSystem call
			 * back function.*/
			if(counter == 3)
     d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	09 f0       	breq	.+2      	; 0xd52 <main+0x20c>
     d50:	4b cf       	rjmp	.-362    	; 0xbe8 <main+0xa2>
			{
				Timer1_init(&Timer1_Configurations);
     d52:	ce 01       	movw	r24, r28
     d54:	88 96       	adiw	r24, 0x28	; 40
     d56:	0e 94 a4 1a 	call	0x3548	; 0x3548 <Timer1_init>
				Timer1_setCallBack(lockSystem);
     d5a:	87 ed       	ldi	r24, 0xD7	; 215
     d5c:	9a e0       	ldi	r25, 0x0A	; 10
     d5e:	0e 94 2d 1b 	call	0x365a	; 0x365a <Timer1_setCallBack>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a0 e8       	ldi	r26, 0x80	; 128
     d68:	bf e3       	ldi	r27, 0x3F	; 63
     d6a:	8b 87       	std	Y+11, r24	; 0x0b
     d6c:	9c 87       	std	Y+12, r25	; 0x0c
     d6e:	ad 87       	std	Y+13, r26	; 0x0d
     d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a ef       	ldi	r20, 0xFA	; 250
     d80:	54 e4       	ldi	r21, 0x44	; 68
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8f 83       	std	Y+7, r24	; 0x07
     d8c:	98 87       	std	Y+8, r25	; 0x08
     d8e:	a9 87       	std	Y+9, r26	; 0x09
     d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <main+0x26e>
		__ticks = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <main+0x2ec>
	else if (__tmp > 65535)
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <main+0x2ce>
     df6:	88 ec       	ldi	r24, 0xC8	; 200
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <main+0x2bc>
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <main+0x2b0>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <main+0x2f8>
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				while(g_tick != 0);
     e46:	80 91 02 01 	lds	r24, 0x0102
     e4a:	88 23       	and	r24, r24
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <main+0x300>
     e4e:	cc ce       	rjmp	.-616    	; 0xbe8 <main+0xa2>

00000e50 <enterPass>:
 * - The function is responsible to take the two passwords from the user and send them
 * to the control ECU.
 * - The function is also responsible to interface with the user through the LCD and the
 * keypad to take the needed passwords. */
void enterPass(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	c7 54       	subi	r28, 0x47	; 71
     e5a:	d0 40       	sbci	r29, 0x00	; 0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[5] ,pass2[5];
	uint8 counter1 = 0, counter2 = 0, pressedKey;
     e66:	1d ae       	std	Y+61, r1	; 0x3d
     e68:	1c ae       	std	Y+60, r1	; 0x3c
	LCD_clearScreen();
     e6a:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"plz enter pass:");
     e6e:	20 e6       	ldi	r18, 0x60	; 96
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	a9 01       	movw	r20, r18
     e78:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_moveCursor>
     e84:	8b c0       	rjmp	.+278    	; 0xf9c <enterPass+0x14c>
	/* - The function here takes 5 digits of the pass1 and these digits must be
	 * from 0 to 9 and it will not accept more or less than 5 digits.
	 * - It will display '*' every time the user enters a digit.*/
	while(counter1 < 5)
	{
		pressedKey = KEYPAD_getPressedKey();
     e86:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
     e8a:	8b af       	std	Y+59, r24	; 0x3b
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	aa ef       	ldi	r26, 0xFA	; 250
     e92:	b3 e4       	ldi	r27, 0x43	; 67
     e94:	8d ab       	std	Y+53, r24	; 0x35
     e96:	9e ab       	std	Y+54, r25	; 0x36
     e98:	af ab       	std	Y+55, r26	; 0x37
     e9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6d a9       	ldd	r22, Y+53	; 0x35
     e9e:	7e a9       	ldd	r23, Y+54	; 0x36
     ea0:	8f a9       	ldd	r24, Y+55	; 0x37
     ea2:	98 ad       	ldd	r25, Y+56	; 0x38
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 ab       	std	Y+49, r24	; 0x31
     eb6:	9a ab       	std	Y+50, r25	; 0x32
     eb8:	ab ab       	std	Y+51, r26	; 0x33
     eba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ebc:	69 a9       	ldd	r22, Y+49	; 0x31
     ebe:	7a a9       	ldd	r23, Y+50	; 0x32
     ec0:	8b a9       	ldd	r24, Y+51	; 0x33
     ec2:	9c a9       	ldd	r25, Y+52	; 0x34
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <enterPass+0x8e>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	98 ab       	std	Y+48, r25	; 0x30
     eda:	8f a7       	std	Y+47, r24	; 0x2f
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <enterPass+0x10c>
	else if (__tmp > 65535)
     ede:	69 a9       	ldd	r22, Y+49	; 0x31
     ee0:	7a a9       	ldd	r23, Y+50	; 0x32
     ee2:	8b a9       	ldd	r24, Y+51	; 0x33
     ee4:	9c a9       	ldd	r25, Y+52	; 0x34
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <enterPass+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6d a9       	ldd	r22, Y+53	; 0x35
     ef8:	7e a9       	ldd	r23, Y+54	; 0x36
     efa:	8f a9       	ldd	r24, Y+55	; 0x37
     efc:	98 ad       	ldd	r25, Y+56	; 0x38
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <enterPass+0xee>
     f20:	88 ec       	ldi	r24, 0xC8	; 200
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e a7       	std	Y+46, r25	; 0x2e
     f26:	8d a7       	std	Y+45, r24	; 0x2d
     f28:	8d a5       	ldd	r24, Y+45	; 0x2d
     f2a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <enterPass+0xdc>
     f30:	9e a7       	std	Y+46, r25	; 0x2e
     f32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8f a5       	ldd	r24, Y+47	; 0x2f
     f36:	98 a9       	ldd	r25, Y+48	; 0x30
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	98 ab       	std	Y+48, r25	; 0x30
     f3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f40:	98 a9       	ldd	r25, Y+48	; 0x30
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <enterPass+0xd0>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <enterPass+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	98 ab       	std	Y+48, r25	; 0x30
     f5a:	8f a7       	std	Y+47, r24	; 0x2f
     f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	9c a7       	std	Y+44, r25	; 0x2c
     f62:	8b a7       	std	Y+43, r24	; 0x2b
     f64:	8b a5       	ldd	r24, Y+43	; 0x2b
     f66:	9c a5       	ldd	r25, Y+44	; 0x2c
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <enterPass+0x118>
     f6c:	9c a7       	std	Y+44, r25	; 0x2c
     f6e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);

		if(pressedKey>='0' && pressedKey<='9')
     f70:	8b ad       	ldd	r24, Y+59	; 0x3b
     f72:	80 33       	cpi	r24, 0x30	; 48
     f74:	98 f0       	brcs	.+38     	; 0xf9c <enterPass+0x14c>
     f76:	8b ad       	ldd	r24, Y+59	; 0x3b
     f78:	8a 33       	cpi	r24, 0x3A	; 58
     f7a:	80 f4       	brcc	.+32     	; 0xf9c <enterPass+0x14c>
		{
			pass1[counter1] = pressedKey;
     f7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	ce 01       	movw	r24, r28
     f84:	ce 96       	adiw	r24, 0x3e	; 62
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	8b ad       	ldd	r24, Y+59	; 0x3b
     f8e:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     f90:	8a e2       	ldi	r24, 0x2A	; 42
     f92:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_displayCharacter>
			counter1++;
     f96:	8d ad       	ldd	r24, Y+61	; 0x3d
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8d af       	std	Y+61, r24	; 0x3d
	LCD_displayStringRowColumn(0,0,"plz enter pass:");
	LCD_moveCursor(1,0);
	/* - The function here takes 5 digits of the pass1 and these digits must be
	 * from 0 to 9 and it will not accept more or less than 5 digits.
	 * - It will display '*' every time the user enters a digit.*/
	while(counter1 < 5)
     f9c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f9e:	85 30       	cpi	r24, 0x05	; 5
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <enterPass+0x154>
     fa2:	71 cf       	rjmp	.-286    	; 0xe86 <enterPass+0x36>
	/* -The while(1) here is to force the program not to go to the next step until
	 * the user press '=' then it will ask for pass2 and it take it in the same way
	 * as described in pass1.*/
	while(1)
	{
		if(KEYPAD_getPressedKey() == '=')
     fa4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
     fa8:	8d 33       	cpi	r24, 0x3D	; 61
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <enterPass+0x154>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	aa ef       	ldi	r26, 0xFA	; 250
     fb2:	b3 e4       	ldi	r27, 0x43	; 67
     fb4:	8f a3       	std	Y+39, r24	; 0x27
     fb6:	98 a7       	std	Y+40, r25	; 0x28
     fb8:	a9 a7       	std	Y+41, r26	; 0x29
     fba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbc:	6f a1       	ldd	r22, Y+39	; 0x27
     fbe:	78 a5       	ldd	r23, Y+40	; 0x28
     fc0:	89 a5       	ldd	r24, Y+41	; 0x29
     fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a ef       	ldi	r20, 0xFA	; 250
     fca:	54 e4       	ldi	r21, 0x44	; 68
     fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	8b a3       	std	Y+35, r24	; 0x23
     fd6:	9c a3       	std	Y+36, r25	; 0x24
     fd8:	ad a3       	std	Y+37, r26	; 0x25
     fda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fdc:	6b a1       	ldd	r22, Y+35	; 0x23
     fde:	7c a1       	ldd	r23, Y+36	; 0x24
     fe0:	8d a1       	ldd	r24, Y+37	; 0x25
     fe2:	9e a1       	ldd	r25, Y+38	; 0x26
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	2c f4       	brge	.+10     	; 0xffe <enterPass+0x1ae>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9a a3       	std	Y+34, r25	; 0x22
     ffa:	89 a3       	std	Y+33, r24	; 0x21
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <enterPass+0x22c>
	else if (__tmp > 65535)
     ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    1000:	7c a1       	ldd	r23, Y+36	; 0x24
    1002:	8d a1       	ldd	r24, Y+37	; 0x25
    1004:	9e a1       	ldd	r25, Y+38	; 0x26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1012:	18 16       	cp	r1, r24
    1014:	4c f5       	brge	.+82     	; 0x1068 <enterPass+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1016:	6f a1       	ldd	r22, Y+39	; 0x27
    1018:	78 a5       	ldd	r23, Y+40	; 0x28
    101a:	89 a5       	ldd	r24, Y+41	; 0x29
    101c:	9a a5       	ldd	r25, Y+42	; 0x2a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9a a3       	std	Y+34, r25	; 0x22
    103c:	89 a3       	std	Y+33, r24	; 0x21
    103e:	0f c0       	rjmp	.+30     	; 0x105e <enterPass+0x20e>
    1040:	88 ec       	ldi	r24, 0xC8	; 200
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	98 a3       	std	Y+32, r25	; 0x20
    1046:	8f 8f       	std	Y+31, r24	; 0x1f
    1048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104a:	98 a1       	ldd	r25, Y+32	; 0x20
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <enterPass+0x1fc>
    1050:	98 a3       	std	Y+32, r25	; 0x20
    1052:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1054:	89 a1       	ldd	r24, Y+33	; 0x21
    1056:	9a a1       	ldd	r25, Y+34	; 0x22
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105e:	89 a1       	ldd	r24, Y+33	; 0x21
    1060:	9a a1       	ldd	r25, Y+34	; 0x22
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	69 f7       	brne	.-38     	; 0x1040 <enterPass+0x1f0>
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <enterPass+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1068:	6b a1       	ldd	r22, Y+35	; 0x23
    106a:	7c a1       	ldd	r23, Y+36	; 0x24
    106c:	8d a1       	ldd	r24, Y+37	; 0x25
    106e:	9e a1       	ldd	r25, Y+38	; 0x26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9a a3       	std	Y+34, r25	; 0x22
    107a:	89 a3       	std	Y+33, r24	; 0x21
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	9e 8f       	std	Y+30, r25	; 0x1e
    1082:	8d 8f       	std	Y+29, r24	; 0x1d
    1084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <enterPass+0x238>
    108c:	9e 8f       	std	Y+30, r25	; 0x1e
    108e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(500);
			LCD_clearScreen();
    1090:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"plz re-enter the");
    1094:	20 e7       	ldi	r18, 0x70	; 112
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same pass:");
    10a2:	21 e8       	ldi	r18, 0x81	; 129
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
			LCD_moveCursor(1,11);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	6b e0       	ldi	r22, 0x0B	; 11
    10b4:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_moveCursor>
    10b8:	8c c0       	rjmp	.+280    	; 0x11d2 <enterPass+0x382>
			while(counter2 < 5)
			{
				pressedKey = KEYPAD_getPressedKey();
    10ba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    10be:	8b af       	std	Y+59, r24	; 0x3b
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	aa ef       	ldi	r26, 0xFA	; 250
    10c6:	b3 e4       	ldi	r27, 0x43	; 67
    10c8:	89 8f       	std	Y+25, r24	; 0x19
    10ca:	9a 8f       	std	Y+26, r25	; 0x1a
    10cc:	ab 8f       	std	Y+27, r26	; 0x1b
    10ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d0:	69 8d       	ldd	r22, Y+25	; 0x19
    10d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4a ef       	ldi	r20, 0xFA	; 250
    10de:	54 e4       	ldi	r21, 0x44	; 68
    10e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8d 8b       	std	Y+21, r24	; 0x15
    10ea:	9e 8b       	std	Y+22, r25	; 0x16
    10ec:	af 8b       	std	Y+23, r26	; 0x17
    10ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	8f 89       	ldd	r24, Y+23	; 0x17
    10f6:	98 8d       	ldd	r25, Y+24	; 0x18
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	5f e3       	ldi	r21, 0x3F	; 63
    1100:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1104:	88 23       	and	r24, r24
    1106:	2c f4       	brge	.+10     	; 0x1112 <enterPass+0x2c2>
		__ticks = 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 8b       	std	Y+20, r25	; 0x14
    110e:	8b 8b       	std	Y+19, r24	; 0x13
    1110:	3f c0       	rjmp	.+126    	; 0x1190 <enterPass+0x340>
	else if (__tmp > 65535)
    1112:	6d 89       	ldd	r22, Y+21	; 0x15
    1114:	7e 89       	ldd	r23, Y+22	; 0x16
    1116:	8f 89       	ldd	r24, Y+23	; 0x17
    1118:	98 8d       	ldd	r25, Y+24	; 0x18
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	3f ef       	ldi	r19, 0xFF	; 255
    111e:	4f e7       	ldi	r20, 0x7F	; 127
    1120:	57 e4       	ldi	r21, 0x47	; 71
    1122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1126:	18 16       	cp	r1, r24
    1128:	4c f5       	brge	.+82     	; 0x117c <enterPass+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112a:	69 8d       	ldd	r22, Y+25	; 0x19
    112c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e2       	ldi	r20, 0x20	; 32
    1138:	51 e4       	ldi	r21, 0x41	; 65
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	9c 8b       	std	Y+20, r25	; 0x14
    1150:	8b 8b       	std	Y+19, r24	; 0x13
    1152:	0f c0       	rjmp	.+30     	; 0x1172 <enterPass+0x322>
    1154:	88 ec       	ldi	r24, 0xC8	; 200
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9a 8b       	std	Y+18, r25	; 0x12
    115a:	89 8b       	std	Y+17, r24	; 0x11
    115c:	89 89       	ldd	r24, Y+17	; 0x11
    115e:	9a 89       	ldd	r25, Y+18	; 0x12
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <enterPass+0x310>
    1164:	9a 8b       	std	Y+18, r25	; 0x12
    1166:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1168:	8b 89       	ldd	r24, Y+19	; 0x13
    116a:	9c 89       	ldd	r25, Y+20	; 0x14
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	9c 8b       	std	Y+20, r25	; 0x14
    1170:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	8b 89       	ldd	r24, Y+19	; 0x13
    1174:	9c 89       	ldd	r25, Y+20	; 0x14
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	69 f7       	brne	.-38     	; 0x1154 <enterPass+0x304>
    117a:	14 c0       	rjmp	.+40     	; 0x11a4 <enterPass+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117c:	6d 89       	ldd	r22, Y+21	; 0x15
    117e:	7e 89       	ldd	r23, Y+22	; 0x16
    1180:	8f 89       	ldd	r24, Y+23	; 0x17
    1182:	98 8d       	ldd	r25, Y+24	; 0x18
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9c 8b       	std	Y+20, r25	; 0x14
    118e:	8b 8b       	std	Y+19, r24	; 0x13
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	9c 89       	ldd	r25, Y+20	; 0x14
    1194:	98 8b       	std	Y+16, r25	; 0x10
    1196:	8f 87       	std	Y+15, r24	; 0x0f
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	98 89       	ldd	r25, Y+16	; 0x10
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <enterPass+0x34c>
    11a0:	98 8b       	std	Y+16, r25	; 0x10
    11a2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);

				if(pressedKey>='0' && pressedKey<='9')
    11a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a6:	80 33       	cpi	r24, 0x30	; 48
    11a8:	a0 f0       	brcs	.+40     	; 0x11d2 <enterPass+0x382>
    11aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ac:	8a 33       	cpi	r24, 0x3A	; 58
    11ae:	88 f4       	brcc	.+34     	; 0x11d2 <enterPass+0x382>
				{
					pass2[counter2] = pressedKey;
    11b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	ce 01       	movw	r24, r28
    11b8:	8d 5b       	subi	r24, 0xBD	; 189
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	fc 01       	movw	r30, r24
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    11c4:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    11c6:	8a e2       	ldi	r24, 0x2A	; 42
    11c8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_displayCharacter>
					counter2++;
    11cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	8c af       	std	Y+60, r24	; 0x3c
			_delay_ms(500);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"plz re-enter the");
			LCD_displayStringRowColumn(1,0,"same pass:");
			LCD_moveCursor(1,11);
			while(counter2 < 5)
    11d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    11d4:	85 30       	cpi	r24, 0x05	; 5
    11d6:	08 f4       	brcc	.+2      	; 0x11da <enterPass+0x38a>
    11d8:	70 cf       	rjmp	.-288    	; 0x10ba <enterPass+0x26a>
	}
	/*Here it will start sending the two passwords to the Control ECU if the user
	 * enter '=' for the second time.*/
	while(1)
	{
		if(KEYPAD_getPressedKey() == '=')
    11da:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    11de:	8d 33       	cpi	r24, 0x3D	; 61
    11e0:	e1 f7       	brne	.-8      	; 0x11da <enterPass+0x38a>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	aa ef       	ldi	r26, 0xFA	; 250
    11e8:	b3 e4       	ldi	r27, 0x43	; 67
    11ea:	8b 87       	std	Y+11, r24	; 0x0b
    11ec:	9c 87       	std	Y+12, r25	; 0x0c
    11ee:	ad 87       	std	Y+13, r26	; 0x0d
    11f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	8f 83       	std	Y+7, r24	; 0x07
    120c:	98 87       	std	Y+8, r25	; 0x08
    120e:	a9 87       	std	Y+9, r26	; 0x09
    1210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e8       	ldi	r20, 0x80	; 128
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1226:	88 23       	and	r24, r24
    1228:	2c f4       	brge	.+10     	; 0x1234 <enterPass+0x3e4>
		__ticks = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	3f c0       	rjmp	.+126    	; 0x12b2 <enterPass+0x462>
	else if (__tmp > 65535)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1248:	18 16       	cp	r1, r24
    124a:	4c f5       	brge	.+82     	; 0x129e <enterPass+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124c:	6b 85       	ldd	r22, Y+11	; 0x0b
    124e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1250:	8d 85       	ldd	r24, Y+13	; 0x0d
    1252:	9e 85       	ldd	r25, Y+14	; 0x0e
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e2       	ldi	r20, 0x20	; 32
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	0f c0       	rjmp	.+30     	; 0x1294 <enterPass+0x444>
    1276:	88 ec       	ldi	r24, 0xC8	; 200
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	8b 83       	std	Y+3, r24	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <enterPass+0x432>
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	69 f7       	brne	.-38     	; 0x1276 <enterPass+0x426>
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <enterPass+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129e:	6f 81       	ldd	r22, Y+7	; 0x07
    12a0:	78 85       	ldd	r23, Y+8	; 0x08
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <enterPass+0x46e>
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			for(uint8 i = 0; i<5; i++)
    12c6:	1a ae       	std	Y+58, r1	; 0x3a
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <enterPass+0x496>
			{
				UART_sendByte(pass1[i]);
    12ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	ce 01       	movw	r24, r28
    12d2:	ce 96       	adiw	r24, 0x3e	; 62
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	80 81       	ld	r24, Z
    12dc:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
	while(1)
	{
		if(KEYPAD_getPressedKey() == '=')
		{
			_delay_ms(500);
			for(uint8 i = 0; i<5; i++)
    12e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
    12e4:	8a af       	std	Y+58, r24	; 0x3a
    12e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    12e8:	85 30       	cpi	r24, 0x05	; 5
    12ea:	78 f3       	brcs	.-34     	; 0x12ca <enterPass+0x47a>
			{
				UART_sendByte(pass1[i]);
			}
			for(uint8 i = 0; i<5; i++)
    12ec:	19 ae       	std	Y+57, r1	; 0x39
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <enterPass+0x4be>
			{
				UART_sendByte(pass2[i]);
    12f0:	89 ad       	ldd	r24, Y+57	; 0x39
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	ce 01       	movw	r24, r28
    12f8:	8d 5b       	subi	r24, 0xBD	; 189
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	fc 01       	movw	r30, r24
    12fe:	e2 0f       	add	r30, r18
    1300:	f3 1f       	adc	r31, r19
    1302:	80 81       	ld	r24, Z
    1304:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
			_delay_ms(500);
			for(uint8 i = 0; i<5; i++)
			{
				UART_sendByte(pass1[i]);
			}
			for(uint8 i = 0; i<5; i++)
    1308:	89 ad       	ldd	r24, Y+57	; 0x39
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	89 af       	std	Y+57, r24	; 0x39
    130e:	89 ad       	ldd	r24, Y+57	; 0x39
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	70 f3       	brcs	.-36     	; 0x12f0 <enterPass+0x4a0>
		}
		else
		{
			//do nothing
		}
	}
    1314:	c9 5b       	subi	r28, 0xB9	; 185
    1316:	df 4f       	sbci	r29, 0xFF	; 255
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <mainOptions>:
 * - This function is the one that will always appears to the user in the home screen
 * after finishing any task.
 * - The function is only responsible to ask the user if he wants to open door or change
 * the password.*/
uint8 mainOptions(void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1330:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    1334:	2c e8       	ldi	r18, 0x8C	; 140
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1342:	2a e9       	ldi	r18, 0x9A	; 154
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
	return (KEYPAD_getPressedKey());
    1350:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <checkPass>:

/*Description:
 *The function is responsible to ask the user for the password to apply his choice
 *and send this password to the Control ECU. */
void checkPass(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	66 97       	sbiw	r28, 0x16	; 22
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5];
	uint8 pressedKey, counter = 0;
    136e:	18 8a       	std	Y+16, r1	; 0x10
	LCD_clearScreen();
    1370:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"plz enter pass: ");
    1374:	2a ea       	ldi	r18, 0xAA	; 170
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_moveCursor>
    138a:	8b c0       	rjmp	.+278    	; 0x14a2 <checkPass+0x148>
	while(counter < 5)
	{
		pressedKey = KEYPAD_getPressedKey();
    138c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <KEYPAD_getPressedKey>
    1390:	89 8b       	std	Y+17, r24	; 0x11
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	aa ef       	ldi	r26, 0xFA	; 250
    1398:	b3 e4       	ldi	r27, 0x43	; 67
    139a:	8b 87       	std	Y+11, r24	; 0x0b
    139c:	9c 87       	std	Y+12, r25	; 0x0c
    139e:	ad 87       	std	Y+13, r26	; 0x0d
    13a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a ef       	ldi	r20, 0xFA	; 250
    13b0:	54 e4       	ldi	r21, 0x44	; 68
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	8f 83       	std	Y+7, r24	; 0x07
    13bc:	98 87       	std	Y+8, r25	; 0x08
    13be:	a9 87       	std	Y+9, r26	; 0x09
    13c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c2:	6f 81       	ldd	r22, Y+7	; 0x07
    13c4:	78 85       	ldd	r23, Y+8	; 0x08
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <checkPass+0x8a>
		__ticks = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <checkPass+0x108>
	else if (__tmp > 65535)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	4c f5       	brge	.+82     	; 0x144e <checkPass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	9e 85       	ldd	r25, Y+14	; 0x0e
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <checkPass+0xea>
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <checkPass+0xd8>
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	69 f7       	brne	.-38     	; 0x1426 <checkPass+0xcc>
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <checkPass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144e:	6f 81       	ldd	r22, Y+7	; 0x07
    1450:	78 85       	ldd	r23, Y+8	; 0x08
    1452:	89 85       	ldd	r24, Y+9	; 0x09
    1454:	9a 85       	ldd	r25, Y+10	; 0x0a
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <checkPass+0x114>
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		if(pressedKey>='0' && pressedKey<='9')
    1476:	89 89       	ldd	r24, Y+17	; 0x11
    1478:	80 33       	cpi	r24, 0x30	; 48
    147a:	98 f0       	brcs	.+38     	; 0x14a2 <checkPass+0x148>
    147c:	89 89       	ldd	r24, Y+17	; 0x11
    147e:	8a 33       	cpi	r24, 0x3A	; 58
    1480:	80 f4       	brcc	.+32     	; 0x14a2 <checkPass+0x148>
		{
			pass[counter] = pressedKey;
    1482:	88 89       	ldd	r24, Y+16	; 0x10
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	ce 01       	movw	r24, r28
    148a:	42 96       	adiw	r24, 0x12	; 18
    148c:	fc 01       	movw	r30, r24
    148e:	e2 0f       	add	r30, r18
    1490:	f3 1f       	adc	r31, r19
    1492:	89 89       	ldd	r24, Y+17	; 0x11
    1494:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1496:	8a e2       	ldi	r24, 0x2A	; 42
    1498:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_displayCharacter>
			counter++;
    149c:	88 89       	ldd	r24, Y+16	; 0x10
    149e:	8f 5f       	subi	r24, 0xFF	; 255
    14a0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 pass[5];
	uint8 pressedKey, counter = 0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"plz enter pass: ");
	LCD_moveCursor(1,0);
	while(counter < 5)
    14a2:	88 89       	ldd	r24, Y+16	; 0x10
    14a4:	85 30       	cpi	r24, 0x05	; 5
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <checkPass+0x150>
    14a8:	71 cf       	rjmp	.-286    	; 0x138c <checkPass+0x32>
		else
		{
			//do nothing
		}
	}
	for(uint8 i = 0; i<5; i++)
    14aa:	1f 86       	std	Y+15, r1	; 0x0f
    14ac:	0e c0       	rjmp	.+28     	; 0x14ca <checkPass+0x170>
	{
		UART_sendByte(pass[i]);
    14ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	42 96       	adiw	r24, 0x12	; 18
    14b8:	fc 01       	movw	r30, r24
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	80 81       	ld	r24, Z
    14c0:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
		else
		{
			//do nothing
		}
	}
	for(uint8 i = 0; i<5; i++)
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
    14ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    14cc:	85 30       	cpi	r24, 0x05	; 5
    14ce:	78 f3       	brcs	.-34     	; 0x14ae <checkPass+0x154>
	{
		UART_sendByte(pass[i]);
	}
}
    14d0:	66 96       	adiw	r28, 0x16	; 22
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <openDoor>:
 * - This is a call back function and it will be called if the user choose to
 * open the door.
 * - It is responsible to display if the door is locking or not on the LCD and to
 * calculate the needed time by changing the number in the OCR1A register every g_tick.*/
void openDoor(void)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	 * - timer frequency = 8*10^6 / 1024 = 7812.5 hz
	 * - clock cycle = 1 / 7812.5 = 1.28*10^-4 sec
	 * - 2^16 = 65536 (0 -> 65535)
	 * - 18 sec (Door is Unlocking) -> 18 / 1.28*10^-4 = 140625 clock cycle (65535 + 65535 + 9555)
	 * - 15 sec (Door is Locking) -> 15 / 1.28*10^-4 = 117187 clock cycle (65535 + 51652)*/
	g_tick++;
    14ea:	80 91 02 01 	lds	r24, 0x0102
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	80 93 02 01 	sts	0x0102, r24
	if (g_tick == 1)
    14f4:	80 91 02 01 	lds	r24, 0x0102
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	b9 f4       	brne	.+46     	; 0x152a <openDoor+0x48>
	{
		LCD_clearScreen();
    14fc:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door is");
    1500:	2b eb       	ldi	r18, 0xBB	; 187
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Unlocking");
    150e:	23 ec       	ldi	r18, 0xC3	; 195
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	a9 01       	movw	r20, r18
    1518:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
		OCR1A = 65535;
    151c:	ea e4       	ldi	r30, 0x4A	; 74
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	3f c0       	rjmp	.+126    	; 0x15a8 <openDoor+0xc6>
	}
	else if (g_tick == 2)
    152a:	80 91 02 01 	lds	r24, 0x0102
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	39 f4       	brne	.+14     	; 0x1540 <openDoor+0x5e>
	{
		OCR1A = 65535;
    1532:	ea e4       	ldi	r30, 0x4A	; 74
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	34 c0       	rjmp	.+104    	; 0x15a8 <openDoor+0xc6>
	}
	else if (g_tick == 3)
    1540:	80 91 02 01 	lds	r24, 0x0102
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	39 f4       	brne	.+14     	; 0x1556 <openDoor+0x74>
	{
		OCR1A = 9555;
    1548:	ea e4       	ldi	r30, 0x4A	; 74
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	83 e5       	ldi	r24, 0x53	; 83
    154e:	95 e2       	ldi	r25, 0x25	; 37
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	80 83       	st	Z, r24
    1554:	29 c0       	rjmp	.+82     	; 0x15a8 <openDoor+0xc6>
	}
	else if (g_tick == 4)
    1556:	80 91 02 01 	lds	r24, 0x0102
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	81 f4       	brne	.+32     	; 0x157e <openDoor+0x9c>
	{
		LCD_clearScreen();
    155e:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door is Locking");
    1562:	2d ec       	ldi	r18, 0xCD	; 205
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
		OCR1A = 65535;
    1570:	ea e4       	ldi	r30, 0x4A	; 74
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	15 c0       	rjmp	.+42     	; 0x15a8 <openDoor+0xc6>
	}
	else if (g_tick == 5)
    157e:	80 91 02 01 	lds	r24, 0x0102
    1582:	85 30       	cpi	r24, 0x05	; 5
    1584:	39 f4       	brne	.+14     	; 0x1594 <openDoor+0xb2>
	{
		OCR1A = 51652;
    1586:	ea e4       	ldi	r30, 0x4A	; 74
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	84 ec       	ldi	r24, 0xC4	; 196
    158c:	99 ec       	ldi	r25, 0xC9	; 201
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	0a c0       	rjmp	.+20     	; 0x15a8 <openDoor+0xc6>
	}
	else if (g_tick == 6)
    1594:	80 91 02 01 	lds	r24, 0x0102
    1598:	86 30       	cpi	r24, 0x06	; 6
    159a:	31 f4       	brne	.+12     	; 0x15a8 <openDoor+0xc6>
	{
		LCD_clearScreen();
    159c:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
		g_tick = 0;
    15a0:	10 92 02 01 	sts	0x0102, r1
		Timer1_deInit();
    15a4:	0e 94 06 1b 	call	0x360c	; 0x360c <Timer1_deInit>
	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <lockSystem>:
/*Description:
 * - This is a call back function and it will be called if the user enters the
 * password wrong 3 times.
 * - It is responsible to display an error message on the LCD for 1 minute.*/
void lockSystem(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	 * CPU frequency = 8 Mhz
	 * timer frequency = 8*10^6 / 1024 = 7812.5 hz
	 * clock cycle = 1 / 7812.5 = 1.28*10^-4 sec
	 * 2^16 = 65536 (0 -> 65535)
	 * 1 min (60 sec) -> 60 / 1.28*10^-4 = 468750 clock cycle ((7 * 65535) + 10005)*/
	g_tick++;
    15b6:	80 91 02 01 	lds	r24, 0x0102
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	80 93 02 01 	sts	0x0102, r24
	if(g_tick == 1)
    15c0:	80 91 02 01 	lds	r24, 0x0102
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	81 f4       	brne	.+32     	; 0x15e8 <lockSystem+0x3a>
	{
		LCD_clearScreen();
    15c8:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Emsek 7aramyyyy");
    15cc:	2d ed       	ldi	r18, 0xDD	; 221
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_displayStringRowColumn>
		OCR1A = 65535;
    15da:	ea e4       	ldi	r30, 0x4A	; 74
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
    15e6:	24 c0       	rjmp	.+72     	; 0x1630 <lockSystem+0x82>
	}
	else if (g_tick > 1 && g_tick < 8)
    15e8:	80 91 02 01 	lds	r24, 0x0102
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	58 f0       	brcs	.+22     	; 0x1606 <lockSystem+0x58>
    15f0:	80 91 02 01 	lds	r24, 0x0102
    15f4:	88 30       	cpi	r24, 0x08	; 8
    15f6:	38 f4       	brcc	.+14     	; 0x1606 <lockSystem+0x58>
	{
		OCR1A = 65535;
    15f8:	ea e4       	ldi	r30, 0x4A	; 74
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	15 c0       	rjmp	.+42     	; 0x1630 <lockSystem+0x82>
	}
	else if (g_tick == 8)
    1606:	80 91 02 01 	lds	r24, 0x0102
    160a:	88 30       	cpi	r24, 0x08	; 8
    160c:	39 f4       	brne	.+14     	; 0x161c <lockSystem+0x6e>
	{
		OCR1A = 10005;
    160e:	ea e4       	ldi	r30, 0x4A	; 74
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	85 e1       	ldi	r24, 0x15	; 21
    1614:	97 e2       	ldi	r25, 0x27	; 39
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <lockSystem+0x82>
	}
	else if (g_tick == 9)
    161c:	80 91 02 01 	lds	r24, 0x0102
    1620:	89 30       	cpi	r24, 0x09	; 9
    1622:	31 f4       	brne	.+12     	; 0x1630 <lockSystem+0x82>
	{
		LCD_clearScreen();
    1624:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_clearScreen>
		g_tick = 0;
    1628:	10 92 02 01 	sts	0x0102, r1
		Timer1_deInit();
    162c:	0e 94 06 1b 	call	0x360c	; 0x360c <Timer1_deInit>
	}
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_setupPinDirection+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_setupPinDirection+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
    1648:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	08 f0       	brcs	.+2      	; 0x1652 <GPIO_setupPinDirection+0x1c>
    1650:	d5 c0       	rjmp	.+426    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	08 f0       	brcs	.+2      	; 0x165a <GPIO_setupPinDirection+0x24>
    1658:	d1 c0       	rjmp	.+418    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3d 83       	std	Y+5, r19	; 0x05
    1662:	2c 83       	std	Y+4, r18	; 0x04
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	9d 81       	ldd	r25, Y+5	; 0x05
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <GPIO_setupPinDirection+0x3a>
    166e:	43 c0       	rjmp	.+134    	; 0x16f6 <GPIO_setupPinDirection+0xc0>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <GPIO_setupPinDirection+0x4e>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	71 f0       	breq	.+28     	; 0x169e <GPIO_setupPinDirection+0x68>
    1682:	bc c0       	rjmp	.+376    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <GPIO_setupPinDirection+0x5a>
    168e:	5f c0       	rjmp	.+190    	; 0x174e <GPIO_setupPinDirection+0x118>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <GPIO_setupPinDirection+0x66>
    169a:	85 c0       	rjmp	.+266    	; 0x17a6 <GPIO_setupPinDirection+0x170>
    169c:	af c0       	rjmp	.+350    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16a4:	aa e3       	ldi	r26, 0x3A	; 58
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ea e3       	ldi	r30, 0x3A	; 58
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0x8c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0x88>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	98 c0       	rjmp	.+304    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16cc:	aa e3       	ldi	r26, 0x3A	; 58
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e3       	ldi	r30, 0x3A	; 58
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0xb4>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0xb0>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	83 c0       	rjmp	.+262    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16fc:	a7 e3       	ldi	r26, 0x37	; 55
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0xe4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0xe0>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	6c c0       	rjmp	.+216    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1724:	a7 e3       	ldi	r26, 0x37	; 55
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_setupPinDirection+0x10c>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_setupPinDirection+0x108>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	57 c0       	rjmp	.+174    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	a1 f4       	brne	.+40     	; 0x177c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1754:	a4 e3       	ldi	r26, 0x34	; 52
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_setupPinDirection+0x13c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_setupPinDirection+0x138>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	40 c0       	rjmp	.+128    	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_setupPinDirection+0x164>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_setupPinDirection+0x160>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	2b c0       	rjmp	.+86     	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17ac:	a1 e3       	ldi	r26, 0x31	; 49
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_setupPinDirection+0x194>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_setupPinDirection+0x190>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17d4:	a1 e3       	ldi	r26, 0x31	; 49
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_setupPinDirection+0x1bc>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_setupPinDirection+0x1b8>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <GPIO_writePin+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_writePin+0x8>
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
    181e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	08 f0       	brcs	.+2      	; 0x1828 <GPIO_writePin+0x1c>
    1826:	d5 c0       	rjmp	.+426    	; 0x19d2 <GPIO_writePin+0x1c6>
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	08 f0       	brcs	.+2      	; 0x1830 <GPIO_writePin+0x24>
    182e:	d1 c0       	rjmp	.+418    	; 0x19d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <GPIO_writePin+0x3a>
    1844:	43 c0       	rjmp	.+134    	; 0x18cc <GPIO_writePin+0xc0>
    1846:	2c 81       	ldd	r18, Y+4	; 0x04
    1848:	3d 81       	ldd	r19, Y+5	; 0x05
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <GPIO_writePin+0x4e>
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	71 f0       	breq	.+28     	; 0x1874 <GPIO_writePin+0x68>
    1858:	bc c0       	rjmp	.+376    	; 0x19d2 <GPIO_writePin+0x1c6>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <GPIO_writePin+0x5a>
    1864:	5f c0       	rjmp	.+190    	; 0x1924 <GPIO_writePin+0x118>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_writePin+0x66>
    1870:	85 c0       	rjmp	.+266    	; 0x197c <GPIO_writePin+0x170>
    1872:	af c0       	rjmp	.+350    	; 0x19d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0x8c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0x88>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	98 c0       	rjmp	.+304    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18a2:	ab e3       	ldi	r26, 0x3B	; 59
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0xb4>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0xb0>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	83 c0       	rjmp	.+262    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18d2:	a8 e3       	ldi	r26, 0x38	; 56
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0xe4>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0xe0>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	6c c0       	rjmp	.+216    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_writePin+0x10c>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_writePin+0x108>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	57 c0       	rjmp	.+174    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	a1 f4       	brne	.+40     	; 0x1952 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_writePin+0x13c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_writePin+0x138>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	40 c0       	rjmp	.+128    	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1952:	a5 e3       	ldi	r26, 0x35	; 53
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e3       	ldi	r30, 0x35	; 53
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_writePin+0x164>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_writePin+0x160>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	2b c0       	rjmp	.+86     	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	a1 f4       	brne	.+40     	; 0x19aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_writePin+0x194>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_writePin+0x190>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19aa:	a2 e3       	ldi	r26, 0x32	; 50
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e2 e3       	ldi	r30, 0x32	; 50
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_writePin+0x1bc>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_writePin+0x1b8>
    19cc:	80 95       	com	r24
    19ce:	84 23       	and	r24, r20
    19d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_readPin+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_readPin+0x8>
    19ea:	0f 92       	push	r0
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 30       	cpi	r24, 0x08	; 8
    19fa:	08 f0       	brcs	.+2      	; 0x19fe <GPIO_readPin+0x1c>
    19fc:	84 c0       	rjmp	.+264    	; 0x1b06 <GPIO_readPin+0x124>
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <GPIO_readPin+0x24>
    1a04:	80 c0       	rjmp	.+256    	; 0x1b06 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3d 83       	std	Y+5, r19	; 0x05
    1a0e:	2c 83       	std	Y+4, r18	; 0x04
    1a10:	4c 81       	ldd	r20, Y+4	; 0x04
    1a12:	5d 81       	ldd	r21, Y+5	; 0x05
    1a14:	41 30       	cpi	r20, 0x01	; 1
    1a16:	51 05       	cpc	r21, r1
    1a18:	79 f1       	breq	.+94     	; 0x1a78 <GPIO_readPin+0x96>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	91 05       	cpc	r25, r1
    1a22:	34 f4       	brge	.+12     	; 0x1a30 <GPIO_readPin+0x4e>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	21 15       	cp	r18, r1
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	69 f0       	breq	.+26     	; 0x1a48 <GPIO_readPin+0x66>
    1a2e:	6b c0       	rjmp	.+214    	; 0x1b06 <GPIO_readPin+0x124>
    1a30:	4c 81       	ldd	r20, Y+4	; 0x04
    1a32:	5d 81       	ldd	r21, Y+5	; 0x05
    1a34:	42 30       	cpi	r20, 0x02	; 2
    1a36:	51 05       	cpc	r21, r1
    1a38:	b9 f1       	breq	.+110    	; 0x1aa8 <GPIO_readPin+0xc6>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <GPIO_readPin+0x64>
    1a44:	49 c0       	rjmp	.+146    	; 0x1ad8 <GPIO_readPin+0xf6>
    1a46:	5f c0       	rjmp	.+190    	; 0x1b06 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a48:	e9 e3       	ldi	r30, 0x39	; 57
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a9 01       	movw	r20, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_readPin+0x7e>
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	8a 95       	dec	r24
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_readPin+0x7a>
    1a64:	ca 01       	movw	r24, r20
    1a66:	81 70       	andi	r24, 0x01	; 1
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a74:	19 82       	std	Y+1, r1	; 0x01
    1a76:	47 c0       	rjmp	.+142    	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a78:	e6 e3       	ldi	r30, 0x36	; 54
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_readPin+0xae>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_readPin+0xaa>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	31 c0       	rjmp	.+98     	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    1aa6:	2f c0       	rjmp	.+94     	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1aa8:	e3 e3       	ldi	r30, 0x33	; 51
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_readPin+0xde>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_readPin+0xda>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	19 c0       	rjmp	.+50     	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	17 c0       	rjmp	.+46     	; 0x1b06 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ad8:	e0 e3       	ldi	r30, 0x30	; 48
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <GPIO_readPin+0x10e>
    1aec:	55 95       	asr	r21
    1aee:	47 95       	ror	r20
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <GPIO_readPin+0x10a>
    1af4:	ca 01       	movw	r24, r20
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b04:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <GPIO_setupPortDirection+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <GPIO_setupPortDirection+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	90 f5       	brcc	.+100    	; 0x1b92 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3c 83       	std	Y+4, r19	; 0x04
    1b36:	2b 83       	std	Y+3, r18	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <GPIO_setupPortDirection+0x5e>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <GPIO_setupPortDirection+0x3e>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <GPIO_setupPortDirection+0x54>
    1b54:	1e c0       	rjmp	.+60     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
    1b56:	2b 81       	ldd	r18, Y+3	; 0x03
    1b58:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <GPIO_setupPortDirection+0x68>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	81 f0       	breq	.+32     	; 0x1b8a <GPIO_setupPortDirection+0x72>
    1b6a:	13 c0       	rjmp	.+38     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b6c:	ea e3       	ldi	r30, 0x3A	; 58
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
    1b74:	0e c0       	rjmp	.+28     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b76:	e7 e3       	ldi	r30, 0x37	; 55
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	80 83       	st	Z, r24
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b80:	e4 e3       	ldi	r30, 0x34	; 52
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 83       	st	Z, r24
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b8a:	e1 e3       	ldi	r30, 0x31	; 49
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <GPIO_writePort+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <GPIO_writePort+0x8>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	90 f5       	brcc	.+100    	; 0x1c1a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3c 83       	std	Y+4, r19	; 0x04
    1bbe:	2b 83       	std	Y+3, r18	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	d1 f0       	breq	.+52     	; 0x1bfe <GPIO_writePort+0x5e>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <GPIO_writePort+0x3e>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <GPIO_writePort+0x54>
    1bdc:	1e c0       	rjmp	.+60     	; 0x1c1a <GPIO_writePort+0x7a>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <GPIO_writePort+0x68>
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	81 f0       	breq	.+32     	; 0x1c12 <GPIO_writePort+0x72>
    1bf2:	13 c0       	rjmp	.+38     	; 0x1c1a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	80 83       	st	Z, r24
    1bfc:	0e c0       	rjmp	.+28     	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	80 83       	st	Z, r24
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c08:	e5 e3       	ldi	r30, 0x35	; 53
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	80 83       	st	Z, r24
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c12:	e2 e3       	ldi	r30, 0x32	; 50
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <GPIO_readPort+0x6>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <GPIO_readPort+0x8>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c36:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	84 30       	cpi	r24, 0x04	; 4
    1c3c:	90 f5       	brcc	.+100    	; 0x1ca2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	3c 83       	std	Y+4, r19	; 0x04
    1c46:	2b 83       	std	Y+3, r18	; 0x03
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	d1 f0       	breq	.+52     	; 0x1c86 <GPIO_readPort+0x5e>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <GPIO_readPort+0x3e>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <GPIO_readPort+0x54>
    1c64:	1e c0       	rjmp	.+60     	; 0x1ca2 <GPIO_readPort+0x7a>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <GPIO_readPort+0x68>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	91 05       	cpc	r25, r1
    1c78:	81 f0       	breq	.+32     	; 0x1c9a <GPIO_readPort+0x72>
    1c7a:	13 c0       	rjmp	.+38     	; 0x1ca2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c7c:	e9 e3       	ldi	r30, 0x39	; 57
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c86:	e6 e3       	ldi	r30, 0x36	; 54
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	09 c0       	rjmp	.+18     	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c90:	e3 e3       	ldi	r30, 0x33	; 51
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c9a:	e0 e3       	ldi	r30, 0x30	; 48
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	60 97       	sbiw	r28, 0x10	; 16
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	63 e0       	ldi	r22, 0x03	; 3
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	67 e0       	ldi	r22, 0x07	; 7
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d16:	1f 86       	std	Y+15, r1	; 0x0f
    1d18:	ab c0       	rjmp	.+342    	; 0x1e70 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d2e:	18 8a       	std	Y+16, r1	; 0x10
    1d30:	22 c0       	rjmp	.+68     	; 0x1d76 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d32:	88 89       	ldd	r24, Y+16	; 0x10
    1d34:	98 2f       	mov	r25, r24
    1d36:	9c 5f       	subi	r25, 0xFC	; 252
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	69 2f       	mov	r22, r25
    1d3c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <GPIO_readPin>
    1d40:	88 23       	and	r24, r24
    1d42:	b1 f4       	brne	.+44     	; 0x1d70 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	98 2f       	mov	r25, r24
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	89 0f       	add	r24, r25
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1d5e:	60 96       	adiw	r28, 0x10	; 16
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d70:	88 89       	ldd	r24, Y+16	; 0x10
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	88 8b       	std	Y+16, r24	; 0x10
    1d76:	88 89       	ldd	r24, Y+16	; 0x10
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	d8 f2       	brcs	.-74     	; 0x1d32 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d8c:	b0 e4       	ldi	r27, 0x40	; 64
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a ef       	ldi	r20, 0xFA	; 250
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <KEYPAD_getPressedKey+0x186>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <KEYPAD_getPressedKey+0x174>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <KEYPAD_getPressedKey+0x168>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <KEYPAD_getPressedKey+0x1b0>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	84 30       	cpi	r24, 0x04	; 4
    1e74:	08 f4       	brcc	.+2      	; 0x1e78 <KEYPAD_getPressedKey+0x1c6>
    1e76:	51 cf       	rjmp	.-350    	; 0x1d1a <KEYPAD_getPressedKey+0x68>
    1e78:	4e cf       	rjmp	.-356    	; 0x1d16 <KEYPAD_getPressedKey+0x64>

00001e7a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e88:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	3c 83       	std	Y+4, r19	; 0x04
    1e92:	2b 83       	std	Y+3, r18	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	88 30       	cpi	r24, 0x08	; 8
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e9e:	70 c0       	rjmp	.+224    	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	29 30       	cpi	r18, 0x09	; 9
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	5c f5       	brge	.+86     	; 0x1f00 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1eb4:	59 c0       	rjmp	.+178    	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eba:	25 30       	cpi	r18, 0x05	; 5
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	9c f4       	brge	.+38     	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <KEYPAD_4x4_adjustKeyNumber+0x52>
    1eca:	48 c0       	rjmp	.+144    	; 0x1f5c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	23 30       	cpi	r18, 0x03	; 3
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ed6:	45 c0       	rjmp	.+138    	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ee2:	39 c0       	rjmp	.+114    	; 0x1f56 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ee4:	68 c0       	rjmp	.+208    	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	26 30       	cpi	r18, 0x06	; 6
    1eec:	31 05       	cpc	r19, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ef0:	41 c0       	rjmp	.+130    	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	87 30       	cpi	r24, 0x07	; 7
    1ef8:	91 05       	cpc	r25, r1
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x84>
    1efc:	3e c0       	rjmp	.+124    	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1efe:	37 c0       	rjmp	.+110    	; 0x1f6e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	2c 30       	cpi	r18, 0x0C	; 12
    1f06:	31 05       	cpc	r19, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f0a:	46 c0       	rjmp	.+140    	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	8d 30       	cpi	r24, 0x0D	; 13
    1f12:	91 05       	cpc	r25, r1
    1f14:	5c f4       	brge	.+22     	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	2a 30       	cpi	r18, 0x0A	; 10
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	b1 f1       	breq	.+108    	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	8b 30       	cpi	r24, 0x0B	; 11
    1f26:	91 05       	cpc	r25, r1
    1f28:	a4 f5       	brge	.+104    	; 0x1f92 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f2a:	2d c0       	rjmp	.+90     	; 0x1f86 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f30:	2e 30       	cpi	r18, 0x0E	; 14
    1f32:	31 05       	cpc	r19, r1
    1f34:	b9 f1       	breq	.+110    	; 0x1fa4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	8e 30       	cpi	r24, 0x0E	; 14
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	7c f1       	brlt	.+94     	; 0x1f9e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	2f 30       	cpi	r18, 0x0F	; 15
    1f46:	31 05       	cpc	r19, r1
    1f48:	81 f1       	breq	.+96     	; 0x1faa <KEYPAD_4x4_adjustKeyNumber+0x130>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	80 31       	cpi	r24, 0x10	; 16
    1f50:	91 05       	cpc	r25, r1
    1f52:	71 f1       	breq	.+92     	; 0x1fb0 <KEYPAD_4x4_adjustKeyNumber+0x136>
    1f54:	30 c0       	rjmp	.+96     	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1f56:	87 e3       	ldi	r24, 0x37	; 55
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	2f c0       	rjmp	.+94     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1f5c:	88 e3       	ldi	r24, 0x38	; 56
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1f62:	89 e3       	ldi	r24, 0x39	; 57
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	29 c0       	rjmp	.+82     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1f68:	85 e2       	ldi	r24, 0x25	; 37
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	26 c0       	rjmp	.+76     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1f6e:	84 e3       	ldi	r24, 0x34	; 52
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	23 c0       	rjmp	.+70     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1f74:	85 e3       	ldi	r24, 0x35	; 53
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	20 c0       	rjmp	.+64     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1f7a:	86 e3       	ldi	r24, 0x36	; 54
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	1d c0       	rjmp	.+58     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f80:	8a e2       	ldi	r24, 0x2A	; 42
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	1a c0       	rjmp	.+52     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1f86:	81 e3       	ldi	r24, 0x31	; 49
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	17 c0       	rjmp	.+46     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1f8c:	82 e3       	ldi	r24, 0x32	; 50
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1f92:	83 e3       	ldi	r24, 0x33	; 51
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f98:	8d e2       	ldi	r24, 0x2D	; 45
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f9e:	8d e0       	ldi	r24, 0x0D	; 13
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	0b c0       	rjmp	.+22     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1fa4:	80 e3       	ldi	r24, 0x30	; 48
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1faa:	8d e3       	ldi	r24, 0x3D	; 61
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1fb0:	8b e2       	ldi	r24, 0x2B	; 43
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff8:	b1 e4       	ldi	r27, 0x41	; 65
    1ffa:	8b 87       	std	Y+11, r24	; 0x0b
    1ffc:	9c 87       	std	Y+12, r25	; 0x0c
    1ffe:	ad 87       	std	Y+13, r26	; 0x0d
    2000:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	6b 85       	ldd	r22, Y+11	; 0x0b
    2004:	7c 85       	ldd	r23, Y+12	; 0x0c
    2006:	8d 85       	ldd	r24, Y+13	; 0x0d
    2008:	9e 85       	ldd	r25, Y+14	; 0x0e
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a ef       	ldi	r20, 0xFA	; 250
    2010:	54 e4       	ldi	r21, 0x44	; 68
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8f 83       	std	Y+7, r24	; 0x07
    201c:	98 87       	std	Y+8, r25	; 0x08
    201e:	a9 87       	std	Y+9, r26	; 0x09
    2020:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	2c f4       	brge	.+10     	; 0x2044 <LCD_init+0x7a>
		__ticks = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	9e 83       	std	Y+6, r25	; 0x06
    2040:	8d 83       	std	Y+5, r24	; 0x05
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2044:	6f 81       	ldd	r22, Y+7	; 0x07
    2046:	78 85       	ldd	r23, Y+8	; 0x08
    2048:	89 85       	ldd	r24, Y+9	; 0x09
    204a:	9a 85       	ldd	r25, Y+10	; 0x0a
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	4c f5       	brge	.+82     	; 0x20ae <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205c:	6b 85       	ldd	r22, Y+11	; 0x0b
    205e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2060:	8d 85       	ldd	r24, Y+13	; 0x0d
    2062:	9e 85       	ldd	r25, Y+14	; 0x0e
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e2       	ldi	r20, 0x20	; 32
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <LCD_init+0xda>
    2086:	88 ec       	ldi	r24, 0xC8	; 200
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9c 83       	std	Y+4, r25	; 0x04
    208c:	8b 83       	std	Y+3, r24	; 0x03
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_init+0xc8>
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	69 f7       	brne	.-38     	; 0x2086 <LCD_init+0xbc>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_init+0x104>
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	63 e0       	ldi	r22, 0x03	; 3
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	64 e0       	ldi	r22, 0x04	; 4
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	65 e0       	ldi	r22, 0x05	; 5
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    20fe:	83 e3       	ldi	r24, 0x33	; 51
    2100:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2104:	82 e3       	ldi	r24, 0x32	; 50
    2106:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    210a:	88 e2       	ldi	r24, 0x28	; 40
    210c:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2110:	8c e0       	ldi	r24, 0x0C	; 12
    2112:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
}
    211c:	2e 96       	adiw	r28, 0x0e	; 14
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	c3 56       	subi	r28, 0x63	; 99
    213c:	d0 40       	sbci	r29, 0x00	; 0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	fe 01       	movw	r30, r28
    214a:	ed 59       	subi	r30, 0x9D	; 157
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    215a:	fe 01       	movw	r30, r28
    215c:	e1 5a       	subi	r30, 0xA1	; 161
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e8       	ldi	r26, 0x80	; 128
    2166:	bf e3       	ldi	r27, 0x3F	; 63
    2168:	80 83       	st	Z, r24
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	a2 83       	std	Z+2, r26	; 0x02
    216e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	8e 01       	movw	r16, r28
    2172:	05 5a       	subi	r16, 0xA5	; 165
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	e1 5a       	subi	r30, 0xA1	; 161
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	80 83       	st	Z, r24
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	a2 83       	std	Z+2, r26	; 0x02
    219c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219e:	fe 01       	movw	r30, r28
    21a0:	e5 5a       	subi	r30, 0xA5	; 165
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	44 f4       	brge	.+16     	; 0x21cc <LCD_sendCommand+0x9e>
		__ticks = 1;
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5a       	subi	r30, 0xA7	; 167
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
    21ca:	64 c0       	rjmp	.+200    	; 0x2294 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    21cc:	fe 01       	movw	r30, r28
    21ce:	e5 5a       	subi	r30, 0xA5	; 165
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <LCD_sendCommand+0xbe>
    21ea:	43 c0       	rjmp	.+134    	; 0x2272 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	fe 01       	movw	r30, r28
    21ee:	e1 5a       	subi	r30, 0xA1	; 161
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8e 01       	movw	r16, r28
    220c:	07 5a       	subi	r16, 0xA7	; 167
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	80 83       	st	Z, r24
    2222:	1f c0       	rjmp	.+62     	; 0x2262 <LCD_sendCommand+0x134>
    2224:	fe 01       	movw	r30, r28
    2226:	e9 5a       	subi	r30, 0xA9	; 169
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	fe 01       	movw	r30, r28
    2234:	e9 5a       	subi	r30, 0xA9	; 169
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_sendCommand+0x10e>
    2240:	fe 01       	movw	r30, r28
    2242:	e9 5a       	subi	r30, 0xA9	; 169
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	de 01       	movw	r26, r28
    224c:	a7 5a       	subi	r26, 0xA7	; 167
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 5a       	subi	r30, 0xA7	; 167
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	11 96       	adiw	r26, 0x01	; 1
    225e:	9c 93       	st	X, r25
    2260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	fe 01       	movw	r30, r28
    2264:	e7 5a       	subi	r30, 0xA7	; 167
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	d1 f6       	brne	.-76     	; 0x2224 <LCD_sendCommand+0xf6>
    2270:	27 c0       	rjmp	.+78     	; 0x22c0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	8e 01       	movw	r16, r28
    2274:	07 5a       	subi	r16, 0xA7	; 167
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e5 5a       	subi	r30, 0xA5	; 165
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	f8 01       	movw	r30, r16
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	de 01       	movw	r26, r28
    2296:	ab 5a       	subi	r26, 0xAB	; 171
    2298:	bf 4f       	sbci	r27, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5a       	subi	r30, 0xA7	; 167
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	8d 93       	st	X+, r24
    22a6:	9c 93       	st	X, r25
    22a8:	fe 01       	movw	r30, r28
    22aa:	eb 5a       	subi	r30, 0xAB	; 171
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_sendCommand+0x184>
    22b6:	fe 01       	movw	r30, r28
    22b8:	eb 5a       	subi	r30, 0xAB	; 171
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    22ca:	fe 01       	movw	r30, r28
    22cc:	ef 5a       	subi	r30, 0xAF	; 175
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	80 83       	st	Z, r24
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	8e 01       	movw	r16, r28
    22e2:	03 5b       	subi	r16, 0xB3	; 179
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	fe 01       	movw	r30, r28
    22e8:	ef 5a       	subi	r30, 0xAF	; 175
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230e:	fe 01       	movw	r30, r28
    2310:	e3 5b       	subi	r30, 0xB3	; 179
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	44 f4       	brge	.+16     	; 0x233c <LCD_sendCommand+0x20e>
		__ticks = 1;
    232c:	fe 01       	movw	r30, r28
    232e:	e5 5b       	subi	r30, 0xB5	; 181
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	64 c0       	rjmp	.+200    	; 0x2404 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    233c:	fe 01       	movw	r30, r28
    233e:	e3 5b       	subi	r30, 0xB3	; 179
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	0c f0       	brlt	.+2      	; 0x235c <LCD_sendCommand+0x22e>
    235a:	43 c0       	rjmp	.+134    	; 0x23e2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	fe 01       	movw	r30, r28
    235e:	ef 5a       	subi	r30, 0xAF	; 175
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8e 01       	movw	r16, r28
    237c:	05 5b       	subi	r16, 0xB5	; 181
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	1f c0       	rjmp	.+62     	; 0x23d2 <LCD_sendCommand+0x2a4>
    2394:	fe 01       	movw	r30, r28
    2396:	e7 5b       	subi	r30, 0xB7	; 183
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	fe 01       	movw	r30, r28
    23a4:	e7 5b       	subi	r30, 0xB7	; 183
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_sendCommand+0x27e>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5b       	subi	r30, 0xB7	; 183
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	de 01       	movw	r26, r28
    23bc:	a5 5b       	subi	r26, 0xB5	; 181
    23be:	bf 4f       	sbci	r27, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 5b       	subi	r30, 0xB5	; 181
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e5 5b       	subi	r30, 0xB5	; 181
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	d1 f6       	brne	.-76     	; 0x2394 <LCD_sendCommand+0x266>
    23e0:	27 c0       	rjmp	.+78     	; 0x2430 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	8e 01       	movw	r16, r28
    23e4:	05 5b       	subi	r16, 0xB5	; 181
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e3 5b       	subi	r30, 0xB3	; 179
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	de 01       	movw	r26, r28
    2406:	a9 5b       	subi	r26, 0xB9	; 185
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e5 5b       	subi	r30, 0xB5	; 181
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	8d 93       	st	X+, r24
    2416:	9c 93       	st	X, r25
    2418:	fe 01       	movw	r30, r28
    241a:	e9 5b       	subi	r30, 0xB9	; 185
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_sendCommand+0x2f4>
    2426:	fe 01       	movw	r30, r28
    2428:	e9 5b       	subi	r30, 0xB9	; 185
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2430:	fe 01       	movw	r30, r28
    2432:	ed 59       	subi	r30, 0x9D	; 157
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 81       	ld	r24, Z
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	80 71       	andi	r24, 0x10	; 16
    243e:	90 70       	andi	r25, 0x00	; 0
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	95 95       	asr	r25
    2446:	87 95       	ror	r24
    2448:	95 95       	asr	r25
    244a:	87 95       	ror	r24
    244c:	95 95       	asr	r25
    244e:	87 95       	ror	r24
    2450:	98 2f       	mov	r25, r24
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	49 2f       	mov	r20, r25
    2458:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    245c:	fe 01       	movw	r30, r28
    245e:	ed 59       	subi	r30, 0x9D	; 157
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	80 72       	andi	r24, 0x20	; 32
    246a:	90 70       	andi	r25, 0x00	; 0
    246c:	95 95       	asr	r25
    246e:	87 95       	ror	r24
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	95 95       	asr	r25
    2476:	87 95       	ror	r24
    2478:	95 95       	asr	r25
    247a:	87 95       	ror	r24
    247c:	95 95       	asr	r25
    247e:	87 95       	ror	r24
    2480:	98 2f       	mov	r25, r24
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	49 2f       	mov	r20, r25
    2488:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    248c:	fe 01       	movw	r30, r28
    248e:	ed 59       	subi	r30, 0x9D	; 157
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	80 74       	andi	r24, 0x40	; 64
    249a:	90 70       	andi	r25, 0x00	; 0
    249c:	08 2e       	mov	r0, r24
    249e:	89 2f       	mov	r24, r25
    24a0:	00 0c       	add	r0, r0
    24a2:	88 1f       	adc	r24, r24
    24a4:	99 0b       	sbc	r25, r25
    24a6:	00 0c       	add	r0, r0
    24a8:	88 1f       	adc	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	98 2f       	mov	r25, r24
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	64 e0       	ldi	r22, 0x04	; 4
    24b2:	49 2f       	mov	r20, r25
    24b4:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    24b8:	fe 01       	movw	r30, r28
    24ba:	ed 59       	subi	r30, 0x9D	; 157
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	98 2f       	mov	r25, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	99 27       	eor	r25, r25
    24c6:	99 1f       	adc	r25, r25
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	65 e0       	ldi	r22, 0x05	; 5
    24cc:	49 2f       	mov	r20, r25
    24ce:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    24d2:	fe 01       	movw	r30, r28
    24d4:	ed 5b       	subi	r30, 0xBD	; 189
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e8       	ldi	r26, 0x80	; 128
    24de:	bf e3       	ldi	r27, 0x3F	; 63
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	8e 01       	movw	r16, r28
    24ea:	01 5c       	subi	r16, 0xC1	; 193
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 5b       	subi	r30, 0xBD	; 189
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	f8 01       	movw	r30, r16
    250e:	80 83       	st	Z, r24
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	a2 83       	std	Z+2, r26	; 0x02
    2514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2516:	fe 01       	movw	r30, r28
    2518:	ff 96       	adiw	r30, 0x3f	; 63
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_sendCommand+0x40e>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e af       	std	Y+62, r25	; 0x3e
    2538:	8d af       	std	Y+61, r24	; 0x3d
    253a:	46 c0       	rjmp	.+140    	; 0x25c8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    253c:	fe 01       	movw	r30, r28
    253e:	ff 96       	adiw	r30, 0x3f	; 63
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	64 f5       	brge	.+88     	; 0x25b0 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	fe 01       	movw	r30, r28
    255a:	ed 5b       	subi	r30, 0xBD	; 189
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e af       	std	Y+62, r25	; 0x3e
    2584:	8d af       	std	Y+61, r24	; 0x3d
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <LCD_sendCommand+0x478>
    2588:	88 ec       	ldi	r24, 0xC8	; 200
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c af       	std	Y+60, r25	; 0x3c
    258e:	8b af       	std	Y+59, r24	; 0x3b
    2590:	8b ad       	ldd	r24, Y+59	; 0x3b
    2592:	9c ad       	ldd	r25, Y+60	; 0x3c
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_sendCommand+0x466>
    2598:	9c af       	std	Y+60, r25	; 0x3c
    259a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8d ad       	ldd	r24, Y+61	; 0x3d
    259e:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9e af       	std	Y+62, r25	; 0x3e
    25a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <LCD_sendCommand+0x45a>
    25ae:	16 c0       	rjmp	.+44     	; 0x25dc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	fe 01       	movw	r30, r28
    25b2:	ff 96       	adiw	r30, 0x3f	; 63
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9e af       	std	Y+62, r25	; 0x3e
    25c6:	8d af       	std	Y+61, r24	; 0x3d
    25c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    25cc:	9a af       	std	Y+58, r25	; 0x3a
    25ce:	89 af       	std	Y+57, r24	; 0x39
    25d0:	89 ad       	ldd	r24, Y+57	; 0x39
    25d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_sendCommand+0x4a6>
    25d8:	9a af       	std	Y+58, r25	; 0x3a
    25da:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	8d ab       	std	Y+53, r24	; 0x35
    25f0:	9e ab       	std	Y+54, r25	; 0x36
    25f2:	af ab       	std	Y+55, r26	; 0x37
    25f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6d a9       	ldd	r22, Y+53	; 0x35
    25f8:	7e a9       	ldd	r23, Y+54	; 0x36
    25fa:	8f a9       	ldd	r24, Y+55	; 0x37
    25fc:	98 ad       	ldd	r25, Y+56	; 0x38
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	89 ab       	std	Y+49, r24	; 0x31
    2610:	9a ab       	std	Y+50, r25	; 0x32
    2612:	ab ab       	std	Y+51, r26	; 0x33
    2614:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2616:	69 a9       	ldd	r22, Y+49	; 0x31
    2618:	7a a9       	ldd	r23, Y+50	; 0x32
    261a:	8b a9       	ldd	r24, Y+51	; 0x33
    261c:	9c a9       	ldd	r25, Y+52	; 0x34
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_sendCommand+0x50a>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	98 ab       	std	Y+48, r25	; 0x30
    2634:	8f a7       	std	Y+47, r24	; 0x2f
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2638:	69 a9       	ldd	r22, Y+49	; 0x31
    263a:	7a a9       	ldd	r23, Y+50	; 0x32
    263c:	8b a9       	ldd	r24, Y+51	; 0x33
    263e:	9c a9       	ldd	r25, Y+52	; 0x34
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6d a9       	ldd	r22, Y+53	; 0x35
    2652:	7e a9       	ldd	r23, Y+54	; 0x36
    2654:	8f a9       	ldd	r24, Y+55	; 0x37
    2656:	98 ad       	ldd	r25, Y+56	; 0x38
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	98 ab       	std	Y+48, r25	; 0x30
    2676:	8f a7       	std	Y+47, r24	; 0x2f
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_sendCommand+0x56a>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9e a7       	std	Y+46, r25	; 0x2e
    2680:	8d a7       	std	Y+45, r24	; 0x2d
    2682:	8d a5       	ldd	r24, Y+45	; 0x2d
    2684:	9e a5       	ldd	r25, Y+46	; 0x2e
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_sendCommand+0x558>
    268a:	9e a7       	std	Y+46, r25	; 0x2e
    268c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2690:	98 a9       	ldd	r25, Y+48	; 0x30
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	98 ab       	std	Y+48, r25	; 0x30
    2696:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8f a5       	ldd	r24, Y+47	; 0x2f
    269a:	98 a9       	ldd	r25, Y+48	; 0x30
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_sendCommand+0x54c>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	69 a9       	ldd	r22, Y+49	; 0x31
    26a4:	7a a9       	ldd	r23, Y+50	; 0x32
    26a6:	8b a9       	ldd	r24, Y+51	; 0x33
    26a8:	9c a9       	ldd	r25, Y+52	; 0x34
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	98 ab       	std	Y+48, r25	; 0x30
    26b4:	8f a7       	std	Y+47, r24	; 0x2f
    26b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ba:	9c a7       	std	Y+44, r25	; 0x2c
    26bc:	8b a7       	std	Y+43, r24	; 0x2b
    26be:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_sendCommand+0x594>
    26c6:	9c a7       	std	Y+44, r25	; 0x2c
    26c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e8       	ldi	r26, 0x80	; 128
    26da:	bf e3       	ldi	r27, 0x3F	; 63
    26dc:	8f a3       	std	Y+39, r24	; 0x27
    26de:	98 a7       	std	Y+40, r25	; 0x28
    26e0:	a9 a7       	std	Y+41, r26	; 0x29
    26e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6f a1       	ldd	r22, Y+39	; 0x27
    26e6:	78 a5       	ldd	r23, Y+40	; 0x28
    26e8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8b a3       	std	Y+35, r24	; 0x23
    26fe:	9c a3       	std	Y+36, r25	; 0x24
    2700:	ad a3       	std	Y+37, r26	; 0x25
    2702:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9a a3       	std	Y+34, r25	; 0x22
    2722:	89 a3       	std	Y+33, r24	; 0x21
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2726:	6b a1       	ldd	r22, Y+35	; 0x23
    2728:	7c a1       	ldd	r23, Y+36	; 0x24
    272a:	8d a1       	ldd	r24, Y+37	; 0x25
    272c:	9e a1       	ldd	r25, Y+38	; 0x26
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6f a1       	ldd	r22, Y+39	; 0x27
    2740:	78 a5       	ldd	r23, Y+40	; 0x28
    2742:	89 a5       	ldd	r24, Y+41	; 0x29
    2744:	9a a5       	ldd	r25, Y+42	; 0x2a
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9a a3       	std	Y+34, r25	; 0x22
    2764:	89 a3       	std	Y+33, r24	; 0x21
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <LCD_sendCommand+0x658>
    2768:	88 ec       	ldi	r24, 0xC8	; 200
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	98 a3       	std	Y+32, r25	; 0x20
    276e:	8f 8f       	std	Y+31, r24	; 0x1f
    2770:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2772:	98 a1       	ldd	r25, Y+32	; 0x20
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_sendCommand+0x646>
    2778:	98 a3       	std	Y+32, r25	; 0x20
    277a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	89 a1       	ldd	r24, Y+33	; 0x21
    277e:	9a a1       	ldd	r25, Y+34	; 0x22
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9a a3       	std	Y+34, r25	; 0x22
    2784:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	89 a1       	ldd	r24, Y+33	; 0x21
    2788:	9a a1       	ldd	r25, Y+34	; 0x22
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <LCD_sendCommand+0x63a>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6b a1       	ldd	r22, Y+35	; 0x23
    2792:	7c a1       	ldd	r23, Y+36	; 0x24
    2794:	8d a1       	ldd	r24, Y+37	; 0x25
    2796:	9e a1       	ldd	r25, Y+38	; 0x26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
    27a4:	89 a1       	ldd	r24, Y+33	; 0x21
    27a6:	9a a1       	ldd	r25, Y+34	; 0x22
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	8d 8f       	std	Y+29, r24	; 0x1d
    27ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_sendCommand+0x682>
    27b4:	9e 8f       	std	Y+30, r25	; 0x1e
    27b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    27b8:	fe 01       	movw	r30, r28
    27ba:	ed 59       	subi	r30, 0x9D	; 157
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	98 2f       	mov	r25, r24
    27c2:	91 70       	andi	r25, 0x01	; 1
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	62 e0       	ldi	r22, 0x02	; 2
    27c8:	49 2f       	mov	r20, r25
    27ca:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 59       	subi	r30, 0x9D	; 157
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	82 70       	andi	r24, 0x02	; 2
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	95 95       	asr	r25
    27e0:	87 95       	ror	r24
    27e2:	98 2f       	mov	r25, r24
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	63 e0       	ldi	r22, 0x03	; 3
    27e8:	49 2f       	mov	r20, r25
    27ea:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    27ee:	fe 01       	movw	r30, r28
    27f0:	ed 59       	subi	r30, 0x9D	; 157
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	84 70       	andi	r24, 0x04	; 4
    27fc:	90 70       	andi	r25, 0x00	; 0
    27fe:	95 95       	asr	r25
    2800:	87 95       	ror	r24
    2802:	95 95       	asr	r25
    2804:	87 95       	ror	r24
    2806:	98 2f       	mov	r25, r24
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	64 e0       	ldi	r22, 0x04	; 4
    280c:	49 2f       	mov	r20, r25
    280e:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2812:	fe 01       	movw	r30, r28
    2814:	ed 59       	subi	r30, 0x9D	; 157
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	88 70       	andi	r24, 0x08	; 8
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	95 95       	asr	r25
    2828:	87 95       	ror	r24
    282a:	95 95       	asr	r25
    282c:	87 95       	ror	r24
    282e:	98 2f       	mov	r25, r24
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	65 e0       	ldi	r22, 0x05	; 5
    2834:	49 2f       	mov	r20, r25
    2836:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	89 8f       	std	Y+25, r24	; 0x19
    2844:	9a 8f       	std	Y+26, r25	; 0x1a
    2846:	ab 8f       	std	Y+27, r26	; 0x1b
    2848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8d 8b       	std	Y+21, r24	; 0x15
    2864:	9e 8b       	std	Y+22, r25	; 0x16
    2866:	af 8b       	std	Y+23, r26	; 0x17
    2868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <LCD_sendCommand+0x75e>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	3f c0       	rjmp	.+126    	; 0x290a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	69 8d       	ldd	r22, Y+25	; 0x19
    28a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <LCD_sendCommand+0x7be>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9a 8b       	std	Y+18, r25	; 0x12
    28d4:	89 8b       	std	Y+17, r24	; 0x11
    28d6:	89 89       	ldd	r24, Y+17	; 0x11
    28d8:	9a 89       	ldd	r25, Y+18	; 0x12
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <LCD_sendCommand+0x7ac>
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <LCD_sendCommand+0x7a0>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	8b 89       	ldd	r24, Y+19	; 0x13
    290c:	9c 89       	ldd	r25, Y+20	; 0x14
    290e:	98 8b       	std	Y+16, r25	; 0x10
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	8f 85       	ldd	r24, Y+15	; 0x0f
    2914:	98 89       	ldd	r25, Y+16	; 0x10
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_sendCommand+0x7e8>
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e8       	ldi	r26, 0x80	; 128
    292e:	bf e3       	ldi	r27, 0x3F	; 63
    2930:	8b 87       	std	Y+11, r24	; 0x0b
    2932:	9c 87       	std	Y+12, r25	; 0x0c
    2934:	ad 87       	std	Y+13, r26	; 0x0d
    2936:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8f 83       	std	Y+7, r24	; 0x07
    2952:	98 87       	std	Y+8, r25	; 0x08
    2954:	a9 87       	std	Y+9, r26	; 0x09
    2956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_sendCommand+0x84c>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	6b 85       	ldd	r22, Y+11	; 0x0b
    2994:	7c 85       	ldd	r23, Y+12	; 0x0c
    2996:	8d 85       	ldd	r24, Y+13	; 0x0d
    2998:	9e 85       	ldd	r25, Y+14	; 0x0e
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_sendCommand+0x8ac>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9c 83       	std	Y+4, r25	; 0x04
    29c2:	8b 83       	std	Y+3, r24	; 0x03
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_sendCommand+0x89a>
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <LCD_sendCommand+0x88e>
    29e2:	14 c0       	rjmp	.+40     	; 0x2a0c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_sendCommand+0x8d6>
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a0c:	cd 59       	subi	r28, 0x9D	; 157
    2a0e:	df 4f       	sbci	r29, 0xFF	; 255
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	c3 56       	subi	r28, 0x63	; 99
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 59       	subi	r30, 0x9D	; 157
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e1 5a       	subi	r30, 0xA1	; 161
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e8       	ldi	r26, 0x80	; 128
    2a5c:	bf e3       	ldi	r27, 0x3F	; 63
    2a5e:	80 83       	st	Z, r24
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	a2 83       	std	Z+2, r26	; 0x02
    2a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	8e 01       	movw	r16, r28
    2a68:	05 5a       	subi	r16, 0xA5	; 165
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e1 5a       	subi	r30, 0xA1	; 161
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a ef       	ldi	r20, 0xFA	; 250
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 83       	st	Z, r24
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	a2 83       	std	Z+2, r26	; 0x02
    2a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a94:	fe 01       	movw	r30, r28
    2a96:	e5 5a       	subi	r30, 0xA5	; 165
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	44 f4       	brge	.+16     	; 0x2ac2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e7 5a       	subi	r30, 0xA7	; 167
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	64 c0       	rjmp	.+200    	; 0x2b8a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e5 5a       	subi	r30, 0xA5	; 165
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	57 e4       	ldi	r21, 0x47	; 71
    2ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	0c f0       	brlt	.+2      	; 0x2ae2 <LCD_displayCharacter+0xbe>
    2ae0:	43 c0       	rjmp	.+134    	; 0x2b68 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e1 5a       	subi	r30, 0xA1	; 161
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8e 01       	movw	r16, r28
    2b02:	07 5a       	subi	r16, 0xA7	; 167
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	f8 01       	movw	r30, r16
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	80 83       	st	Z, r24
    2b18:	1f c0       	rjmp	.+62     	; 0x2b58 <LCD_displayCharacter+0x134>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e9 5a       	subi	r30, 0xA9	; 169
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e9 5a       	subi	r30, 0xA9	; 169
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <LCD_displayCharacter+0x10e>
    2b36:	fe 01       	movw	r30, r28
    2b38:	e9 5a       	subi	r30, 0xA9	; 169
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	de 01       	movw	r26, r28
    2b42:	a7 5a       	subi	r26, 0xA7	; 167
    2b44:	bf 4f       	sbci	r27, 0xFF	; 255
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 5a       	subi	r30, 0xA7	; 167
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	9c 93       	st	X, r25
    2b56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e7 5a       	subi	r30, 0xA7	; 167
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	d1 f6       	brne	.-76     	; 0x2b1a <LCD_displayCharacter+0xf6>
    2b66:	27 c0       	rjmp	.+78     	; 0x2bb6 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	8e 01       	movw	r16, r28
    2b6a:	07 5a       	subi	r16, 0xA7	; 167
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e5 5a       	subi	r30, 0xA5	; 165
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	f8 01       	movw	r30, r16
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    2b8a:	de 01       	movw	r26, r28
    2b8c:	ab 5a       	subi	r26, 0xAB	; 171
    2b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	e7 5a       	subi	r30, 0xA7	; 167
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	8d 93       	st	X+, r24
    2b9c:	9c 93       	st	X, r25
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	eb 5a       	subi	r30, 0xAB	; 171
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_displayCharacter+0x184>
    2bac:	fe 01       	movw	r30, r28
    2bae:	eb 5a       	subi	r30, 0xAB	; 171
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ef 5a       	subi	r30, 0xAF	; 175
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e8       	ldi	r26, 0x80	; 128
    2bcc:	bf e3       	ldi	r27, 0x3F	; 63
    2bce:	80 83       	st	Z, r24
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	a2 83       	std	Z+2, r26	; 0x02
    2bd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	03 5b       	subi	r16, 0xB3	; 179
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ef 5a       	subi	r30, 0xAF	; 175
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	80 83       	st	Z, r24
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	a2 83       	std	Z+2, r26	; 0x02
    2c02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e3 5b       	subi	r30, 0xB3	; 179
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	44 f4       	brge	.+16     	; 0x2c32 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c22:	fe 01       	movw	r30, r28
    2c24:	e5 5b       	subi	r30, 0xB5	; 181
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	64 c0       	rjmp	.+200    	; 0x2cfa <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c32:	fe 01       	movw	r30, r28
    2c34:	e3 5b       	subi	r30, 0xB3	; 179
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	3f ef       	ldi	r19, 0xFF	; 255
    2c44:	4f e7       	ldi	r20, 0x7F	; 127
    2c46:	57 e4       	ldi	r21, 0x47	; 71
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4c:	18 16       	cp	r1, r24
    2c4e:	0c f0       	brlt	.+2      	; 0x2c52 <LCD_displayCharacter+0x22e>
    2c50:	43 c0       	rjmp	.+134    	; 0x2cd8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c52:	fe 01       	movw	r30, r28
    2c54:	ef 5a       	subi	r30, 0xAF	; 175
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8e 01       	movw	r16, r28
    2c72:	05 5b       	subi	r16, 0xB5	; 181
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	f8 01       	movw	r30, r16
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	1f c0       	rjmp	.+62     	; 0x2cc8 <LCD_displayCharacter+0x2a4>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e7 5b       	subi	r30, 0xB7	; 183
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e7 5b       	subi	r30, 0xB7	; 183
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_displayCharacter+0x27e>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e7 5b       	subi	r30, 0xB7	; 183
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	a5 5b       	subi	r26, 0xB5	; 181
    2cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e5 5b       	subi	r30, 0xB5	; 181
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	9c 93       	st	X, r25
    2cc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e5 5b       	subi	r30, 0xB5	; 181
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	d1 f6       	brne	.-76     	; 0x2c8a <LCD_displayCharacter+0x266>
    2cd6:	27 c0       	rjmp	.+78     	; 0x2d26 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	05 5b       	subi	r16, 0xB5	; 181
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e3 5b       	subi	r30, 0xB3	; 179
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	de 01       	movw	r26, r28
    2cfc:	a9 5b       	subi	r26, 0xB9	; 185
    2cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 5b       	subi	r30, 0xB5	; 181
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	8d 93       	st	X+, r24
    2d0c:	9c 93       	st	X, r25
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e9 5b       	subi	r30, 0xB9	; 185
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x2f4>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e9 5b       	subi	r30, 0xB9	; 185
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2d26:	fe 01       	movw	r30, r28
    2d28:	ed 59       	subi	r30, 0x9D	; 157
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	80 71       	andi	r24, 0x10	; 16
    2d34:	90 70       	andi	r25, 0x00	; 0
    2d36:	95 95       	asr	r25
    2d38:	87 95       	ror	r24
    2d3a:	95 95       	asr	r25
    2d3c:	87 95       	ror	r24
    2d3e:	95 95       	asr	r25
    2d40:	87 95       	ror	r24
    2d42:	95 95       	asr	r25
    2d44:	87 95       	ror	r24
    2d46:	98 2f       	mov	r25, r24
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	62 e0       	ldi	r22, 0x02	; 2
    2d4c:	49 2f       	mov	r20, r25
    2d4e:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d52:	fe 01       	movw	r30, r28
    2d54:	ed 59       	subi	r30, 0x9D	; 157
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	88 2f       	mov	r24, r24
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	80 72       	andi	r24, 0x20	; 32
    2d60:	90 70       	andi	r25, 0x00	; 0
    2d62:	95 95       	asr	r25
    2d64:	87 95       	ror	r24
    2d66:	95 95       	asr	r25
    2d68:	87 95       	ror	r24
    2d6a:	95 95       	asr	r25
    2d6c:	87 95       	ror	r24
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	95 95       	asr	r25
    2d74:	87 95       	ror	r24
    2d76:	98 2f       	mov	r25, r24
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	63 e0       	ldi	r22, 0x03	; 3
    2d7c:	49 2f       	mov	r20, r25
    2d7e:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2d82:	fe 01       	movw	r30, r28
    2d84:	ed 59       	subi	r30, 0x9D	; 157
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	80 74       	andi	r24, 0x40	; 64
    2d90:	90 70       	andi	r25, 0x00	; 0
    2d92:	08 2e       	mov	r0, r24
    2d94:	89 2f       	mov	r24, r25
    2d96:	00 0c       	add	r0, r0
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 0b       	sbc	r25, r25
    2d9c:	00 0c       	add	r0, r0
    2d9e:	88 1f       	adc	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	98 2f       	mov	r25, r24
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	64 e0       	ldi	r22, 0x04	; 4
    2da8:	49 2f       	mov	r20, r25
    2daa:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2dae:	fe 01       	movw	r30, r28
    2db0:	ed 59       	subi	r30, 0x9D	; 157
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	98 2f       	mov	r25, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	99 27       	eor	r25, r25
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	65 e0       	ldi	r22, 0x05	; 5
    2dc2:	49 2f       	mov	r20, r25
    2dc4:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 5b       	subi	r30, 0xBD	; 189
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e8       	ldi	r26, 0x80	; 128
    2dd4:	bf e3       	ldi	r27, 0x3F	; 63
    2dd6:	80 83       	st	Z, r24
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	a2 83       	std	Z+2, r26	; 0x02
    2ddc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	8e 01       	movw	r16, r28
    2de0:	01 5c       	subi	r16, 0xC1	; 193
    2de2:	1f 4f       	sbci	r17, 0xFF	; 255
    2de4:	fe 01       	movw	r30, r28
    2de6:	ed 5b       	subi	r30, 0xBD	; 189
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	4a ef       	ldi	r20, 0xFA	; 250
    2df8:	54 e4       	ldi	r21, 0x44	; 68
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	f8 01       	movw	r30, r16
    2e04:	80 83       	st	Z, r24
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	a2 83       	std	Z+2, r26	; 0x02
    2e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ff 96       	adiw	r30, 0x3f	; 63
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9e af       	std	Y+62, r25	; 0x3e
    2e2e:	8d af       	std	Y+61, r24	; 0x3d
    2e30:	46 c0       	rjmp	.+140    	; 0x2ebe <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e32:	fe 01       	movw	r30, r28
    2e34:	ff 96       	adiw	r30, 0x3f	; 63
    2e36:	60 81       	ld	r22, Z
    2e38:	71 81       	ldd	r23, Z+1	; 0x01
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4a:	18 16       	cp	r1, r24
    2e4c:	64 f5       	brge	.+88     	; 0x2ea6 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 5b       	subi	r30, 0xBD	; 189
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e af       	std	Y+62, r25	; 0x3e
    2e7a:	8d af       	std	Y+61, r24	; 0x3d
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <LCD_displayCharacter+0x478>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c af       	std	Y+60, r25	; 0x3c
    2e84:	8b af       	std	Y+59, r24	; 0x3b
    2e86:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e88:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_displayCharacter+0x466>
    2e8e:	9c af       	std	Y+60, r25	; 0x3c
    2e90:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9e af       	std	Y+62, r25	; 0x3e
    2e9a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <LCD_displayCharacter+0x45a>
    2ea4:	16 c0       	rjmp	.+44     	; 0x2ed2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ff 96       	adiw	r30, 0x3f	; 63
    2eaa:	60 81       	ld	r22, Z
    2eac:	71 81       	ldd	r23, Z+1	; 0x01
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e af       	std	Y+62, r25	; 0x3e
    2ebc:	8d af       	std	Y+61, r24	; 0x3d
    2ebe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec2:	9a af       	std	Y+58, r25	; 0x3a
    2ec4:	89 af       	std	Y+57, r24	; 0x39
    2ec6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ec8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_displayCharacter+0x4a6>
    2ece:	9a af       	std	Y+58, r25	; 0x3a
    2ed0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e8       	ldi	r26, 0x80	; 128
    2ee2:	bf e3       	ldi	r27, 0x3F	; 63
    2ee4:	8d ab       	std	Y+53, r24	; 0x35
    2ee6:	9e ab       	std	Y+54, r25	; 0x36
    2ee8:	af ab       	std	Y+55, r26	; 0x37
    2eea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6d a9       	ldd	r22, Y+53	; 0x35
    2eee:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a ef       	ldi	r20, 0xFA	; 250
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	89 ab       	std	Y+49, r24	; 0x31
    2f06:	9a ab       	std	Y+50, r25	; 0x32
    2f08:	ab ab       	std	Y+51, r26	; 0x33
    2f0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f10:	8b a9       	ldd	r24, Y+51	; 0x33
    2f12:	9c a9       	ldd	r25, Y+52	; 0x34
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	98 ab       	std	Y+48, r25	; 0x30
    2f2a:	8f a7       	std	Y+47, r24	; 0x2f
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f30:	7a a9       	ldd	r23, Y+50	; 0x32
    2f32:	8b a9       	ldd	r24, Y+51	; 0x33
    2f34:	9c a9       	ldd	r25, Y+52	; 0x34
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6d a9       	ldd	r22, Y+53	; 0x35
    2f48:	7e a9       	ldd	r23, Y+54	; 0x36
    2f4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	98 ab       	std	Y+48, r25	; 0x30
    2f6c:	8f a7       	std	Y+47, r24	; 0x2f
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <LCD_displayCharacter+0x56a>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9e a7       	std	Y+46, r25	; 0x2e
    2f76:	8d a7       	std	Y+45, r24	; 0x2d
    2f78:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_displayCharacter+0x558>
    2f80:	9e a7       	std	Y+46, r25	; 0x2e
    2f82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f86:	98 a9       	ldd	r25, Y+48	; 0x30
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	98 ab       	std	Y+48, r25	; 0x30
    2f8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f90:	98 a9       	ldd	r25, Y+48	; 0x30
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <LCD_displayCharacter+0x54c>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	98 ab       	std	Y+48, r25	; 0x30
    2faa:	8f a7       	std	Y+47, r24	; 0x2f
    2fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fae:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb0:	9c a7       	std	Y+44, r25	; 0x2c
    2fb2:	8b a7       	std	Y+43, r24	; 0x2b
    2fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_displayCharacter+0x594>
    2fbc:	9c a7       	std	Y+44, r25	; 0x2c
    2fbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	61 e0       	ldi	r22, 0x01	; 1
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	a0 e8       	ldi	r26, 0x80	; 128
    2fd0:	bf e3       	ldi	r27, 0x3F	; 63
    2fd2:	8f a3       	std	Y+39, r24	; 0x27
    2fd4:	98 a7       	std	Y+40, r25	; 0x28
    2fd6:	a9 a7       	std	Y+41, r26	; 0x29
    2fd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fda:	6f a1       	ldd	r22, Y+39	; 0x27
    2fdc:	78 a5       	ldd	r23, Y+40	; 0x28
    2fde:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	4a ef       	ldi	r20, 0xFA	; 250
    2fe8:	54 e4       	ldi	r21, 0x44	; 68
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8b a3       	std	Y+35, r24	; 0x23
    2ff4:	9c a3       	std	Y+36, r25	; 0x24
    2ff6:	ad a3       	std	Y+37, r26	; 0x25
    2ff8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ffa:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    3000:	9e a1       	ldd	r25, Y+38	; 0x26
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5f e3       	ldi	r21, 0x3F	; 63
    300a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300e:	88 23       	and	r24, r24
    3010:	2c f4       	brge	.+10     	; 0x301c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9a a3       	std	Y+34, r25	; 0x22
    3018:	89 a3       	std	Y+33, r24	; 0x21
    301a:	3f c0       	rjmp	.+126    	; 0x309a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    301c:	6b a1       	ldd	r22, Y+35	; 0x23
    301e:	7c a1       	ldd	r23, Y+36	; 0x24
    3020:	8d a1       	ldd	r24, Y+37	; 0x25
    3022:	9e a1       	ldd	r25, Y+38	; 0x26
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	4c f5       	brge	.+82     	; 0x3086 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3034:	6f a1       	ldd	r22, Y+39	; 0x27
    3036:	78 a5       	ldd	r23, Y+40	; 0x28
    3038:	89 a5       	ldd	r24, Y+41	; 0x29
    303a:	9a a5       	ldd	r25, Y+42	; 0x2a
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e2       	ldi	r20, 0x20	; 32
    3042:	51 e4       	ldi	r21, 0x41	; 65
    3044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	9a a3       	std	Y+34, r25	; 0x22
    305a:	89 a3       	std	Y+33, r24	; 0x21
    305c:	0f c0       	rjmp	.+30     	; 0x307c <LCD_displayCharacter+0x658>
    305e:	88 ec       	ldi	r24, 0xC8	; 200
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	98 a3       	std	Y+32, r25	; 0x20
    3064:	8f 8f       	std	Y+31, r24	; 0x1f
    3066:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3068:	98 a1       	ldd	r25, Y+32	; 0x20
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_displayCharacter+0x646>
    306e:	98 a3       	std	Y+32, r25	; 0x20
    3070:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3072:	89 a1       	ldd	r24, Y+33	; 0x21
    3074:	9a a1       	ldd	r25, Y+34	; 0x22
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	9a a3       	std	Y+34, r25	; 0x22
    307a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307c:	89 a1       	ldd	r24, Y+33	; 0x21
    307e:	9a a1       	ldd	r25, Y+34	; 0x22
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	69 f7       	brne	.-38     	; 0x305e <LCD_displayCharacter+0x63a>
    3084:	14 c0       	rjmp	.+40     	; 0x30ae <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3086:	6b a1       	ldd	r22, Y+35	; 0x23
    3088:	7c a1       	ldd	r23, Y+36	; 0x24
    308a:	8d a1       	ldd	r24, Y+37	; 0x25
    308c:	9e a1       	ldd	r25, Y+38	; 0x26
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9a a3       	std	Y+34, r25	; 0x22
    3098:	89 a3       	std	Y+33, r24	; 0x21
    309a:	89 a1       	ldd	r24, Y+33	; 0x21
    309c:	9a a1       	ldd	r25, Y+34	; 0x22
    309e:	9e 8f       	std	Y+30, r25	; 0x1e
    30a0:	8d 8f       	std	Y+29, r24	; 0x1d
    30a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <LCD_displayCharacter+0x682>
    30aa:	9e 8f       	std	Y+30, r25	; 0x1e
    30ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    30ae:	fe 01       	movw	r30, r28
    30b0:	ed 59       	subi	r30, 0x9D	; 157
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	98 2f       	mov	r25, r24
    30b8:	91 70       	andi	r25, 0x01	; 1
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	62 e0       	ldi	r22, 0x02	; 2
    30be:	49 2f       	mov	r20, r25
    30c0:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    30c4:	fe 01       	movw	r30, r28
    30c6:	ed 59       	subi	r30, 0x9D	; 157
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	82 70       	andi	r24, 0x02	; 2
    30d2:	90 70       	andi	r25, 0x00	; 0
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	98 2f       	mov	r25, r24
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	63 e0       	ldi	r22, 0x03	; 3
    30de:	49 2f       	mov	r20, r25
    30e0:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    30e4:	fe 01       	movw	r30, r28
    30e6:	ed 59       	subi	r30, 0x9D	; 157
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	84 70       	andi	r24, 0x04	; 4
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	95 95       	asr	r25
    30f6:	87 95       	ror	r24
    30f8:	95 95       	asr	r25
    30fa:	87 95       	ror	r24
    30fc:	98 2f       	mov	r25, r24
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	64 e0       	ldi	r22, 0x04	; 4
    3102:	49 2f       	mov	r20, r25
    3104:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3108:	fe 01       	movw	r30, r28
    310a:	ed 59       	subi	r30, 0x9D	; 157
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	88 70       	andi	r24, 0x08	; 8
    3116:	90 70       	andi	r25, 0x00	; 0
    3118:	95 95       	asr	r25
    311a:	87 95       	ror	r24
    311c:	95 95       	asr	r25
    311e:	87 95       	ror	r24
    3120:	95 95       	asr	r25
    3122:	87 95       	ror	r24
    3124:	98 2f       	mov	r25, r24
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	65 e0       	ldi	r22, 0x05	; 5
    312a:	49 2f       	mov	r20, r25
    312c:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a0 e8       	ldi	r26, 0x80	; 128
    3136:	bf e3       	ldi	r27, 0x3F	; 63
    3138:	89 8f       	std	Y+25, r24	; 0x19
    313a:	9a 8f       	std	Y+26, r25	; 0x1a
    313c:	ab 8f       	std	Y+27, r26	; 0x1b
    313e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3140:	69 8d       	ldd	r22, Y+25	; 0x19
    3142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4a ef       	ldi	r20, 0xFA	; 250
    314e:	54 e4       	ldi	r21, 0x44	; 68
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8d 8b       	std	Y+21, r24	; 0x15
    315a:	9e 8b       	std	Y+22, r25	; 0x16
    315c:	af 8b       	std	Y+23, r26	; 0x17
    315e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3160:	6d 89       	ldd	r22, Y+21	; 0x15
    3162:	7e 89       	ldd	r23, Y+22	; 0x16
    3164:	8f 89       	ldd	r24, Y+23	; 0x17
    3166:	98 8d       	ldd	r25, Y+24	; 0x18
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	2c f4       	brge	.+10     	; 0x3182 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9c 8b       	std	Y+20, r25	; 0x14
    317e:	8b 8b       	std	Y+19, r24	; 0x13
    3180:	3f c0       	rjmp	.+126    	; 0x3200 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3182:	6d 89       	ldd	r22, Y+21	; 0x15
    3184:	7e 89       	ldd	r23, Y+22	; 0x16
    3186:	8f 89       	ldd	r24, Y+23	; 0x17
    3188:	98 8d       	ldd	r25, Y+24	; 0x18
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	3f ef       	ldi	r19, 0xFF	; 255
    318e:	4f e7       	ldi	r20, 0x7F	; 127
    3190:	57 e4       	ldi	r21, 0x47	; 71
    3192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3196:	18 16       	cp	r1, r24
    3198:	4c f5       	brge	.+82     	; 0x31ec <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319a:	69 8d       	ldd	r22, Y+25	; 0x19
    319c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    319e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	51 e4       	ldi	r21, 0x41	; 65
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9c 8b       	std	Y+20, r25	; 0x14
    31c0:	8b 8b       	std	Y+19, r24	; 0x13
    31c2:	0f c0       	rjmp	.+30     	; 0x31e2 <LCD_displayCharacter+0x7be>
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9a 8b       	std	Y+18, r25	; 0x12
    31ca:	89 8b       	std	Y+17, r24	; 0x11
    31cc:	89 89       	ldd	r24, Y+17	; 0x11
    31ce:	9a 89       	ldd	r25, Y+18	; 0x12
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <LCD_displayCharacter+0x7ac>
    31d4:	9a 8b       	std	Y+18, r25	; 0x12
    31d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d8:	8b 89       	ldd	r24, Y+19	; 0x13
    31da:	9c 89       	ldd	r25, Y+20	; 0x14
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	9c 8b       	std	Y+20, r25	; 0x14
    31e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e2:	8b 89       	ldd	r24, Y+19	; 0x13
    31e4:	9c 89       	ldd	r25, Y+20	; 0x14
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	69 f7       	brne	.-38     	; 0x31c4 <LCD_displayCharacter+0x7a0>
    31ea:	14 c0       	rjmp	.+40     	; 0x3214 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9c 8b       	std	Y+20, r25	; 0x14
    31fe:	8b 8b       	std	Y+19, r24	; 0x13
    3200:	8b 89       	ldd	r24, Y+19	; 0x13
    3202:	9c 89       	ldd	r25, Y+20	; 0x14
    3204:	98 8b       	std	Y+16, r25	; 0x10
    3206:	8f 87       	std	Y+15, r24	; 0x0f
    3208:	8f 85       	ldd	r24, Y+15	; 0x0f
    320a:	98 89       	ldd	r25, Y+16	; 0x10
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_displayCharacter+0x7e8>
    3210:	98 8b       	std	Y+16, r25	; 0x10
    3212:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 06 0c 	call	0x180c	; 0x180c <GPIO_writePin>
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	a0 e8       	ldi	r26, 0x80	; 128
    3224:	bf e3       	ldi	r27, 0x3F	; 63
    3226:	8b 87       	std	Y+11, r24	; 0x0b
    3228:	9c 87       	std	Y+12, r25	; 0x0c
    322a:	ad 87       	std	Y+13, r26	; 0x0d
    322c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3230:	7c 85       	ldd	r23, Y+12	; 0x0c
    3232:	8d 85       	ldd	r24, Y+13	; 0x0d
    3234:	9e 85       	ldd	r25, Y+14	; 0x0e
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	4a ef       	ldi	r20, 0xFA	; 250
    323c:	54 e4       	ldi	r21, 0x44	; 68
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	8f 83       	std	Y+7, r24	; 0x07
    3248:	98 87       	std	Y+8, r25	; 0x08
    324a:	a9 87       	std	Y+9, r26	; 0x09
    324c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e8       	ldi	r20, 0x80	; 128
    325c:	5f e3       	ldi	r21, 0x3F	; 63
    325e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3262:	88 23       	and	r24, r24
    3264:	2c f4       	brge	.+10     	; 0x3270 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
    326e:	3f c0       	rjmp	.+126    	; 0x32ee <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3270:	6f 81       	ldd	r22, Y+7	; 0x07
    3272:	78 85       	ldd	r23, Y+8	; 0x08
    3274:	89 85       	ldd	r24, Y+9	; 0x09
    3276:	9a 85       	ldd	r25, Y+10	; 0x0a
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	3f ef       	ldi	r19, 0xFF	; 255
    327c:	4f e7       	ldi	r20, 0x7F	; 127
    327e:	57 e4       	ldi	r21, 0x47	; 71
    3280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3284:	18 16       	cp	r1, r24
    3286:	4c f5       	brge	.+82     	; 0x32da <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3288:	6b 85       	ldd	r22, Y+11	; 0x0b
    328a:	7c 85       	ldd	r23, Y+12	; 0x0c
    328c:	8d 85       	ldd	r24, Y+13	; 0x0d
    328e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	40 e2       	ldi	r20, 0x20	; 32
    3296:	51 e4       	ldi	r21, 0x41	; 65
    3298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	bc 01       	movw	r22, r24
    32a2:	cd 01       	movw	r24, r26
    32a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	0f c0       	rjmp	.+30     	; 0x32d0 <LCD_displayCharacter+0x8ac>
    32b2:	88 ec       	ldi	r24, 0xC8	; 200
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9c 83       	std	Y+4, r25	; 0x04
    32b8:	8b 83       	std	Y+3, r24	; 0x03
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <LCD_displayCharacter+0x89a>
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	00 97       	sbiw	r24, 0x00	; 0
    32d6:	69 f7       	brne	.-38     	; 0x32b2 <LCD_displayCharacter+0x88e>
    32d8:	14 c0       	rjmp	.+40     	; 0x3302 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32da:	6f 81       	ldd	r22, Y+7	; 0x07
    32dc:	78 85       	ldd	r23, Y+8	; 0x08
    32de:	89 85       	ldd	r24, Y+9	; 0x09
    32e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	8d 81       	ldd	r24, Y+5	; 0x05
    32f0:	9e 81       	ldd	r25, Y+6	; 0x06
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	9a 81       	ldd	r25, Y+2	; 0x02
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <LCD_displayCharacter+0x8d6>
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3302:	cd 59       	subi	r28, 0x9D	; 157
    3304:	df 4f       	sbci	r29, 0xFF	; 255
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <LCD_displayString+0x6>
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9b 83       	std	Y+3, r25	; 0x03
    3328:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    332a:	19 82       	std	Y+1, r1	; 0x01
    332c:	0e c0       	rjmp	.+28     	; 0x334a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	9b 81       	ldd	r25, Y+3	; 0x03
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f3 1f       	adc	r31, r19
    333e:	80 81       	ld	r24, Z
    3340:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_displayCharacter>
		i++;
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	28 2f       	mov	r18, r24
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	fc 01       	movw	r30, r24
    3356:	e2 0f       	add	r30, r18
    3358:	f3 1f       	adc	r31, r19
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	39 f7       	brne	.-50     	; 0x332e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <LCD_moveCursor+0x6>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <LCD_moveCursor+0x8>
    3374:	0f 92       	push	r0
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	8a 83       	std	Y+2, r24	; 0x02
    337c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	28 2f       	mov	r18, r24
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	3d 83       	std	Y+5, r19	; 0x05
    3386:	2c 83       	std	Y+4, r18	; 0x04
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	9d 81       	ldd	r25, Y+5	; 0x05
    338c:	81 30       	cpi	r24, 0x01	; 1
    338e:	91 05       	cpc	r25, r1
    3390:	c1 f0       	breq	.+48     	; 0x33c2 <LCD_moveCursor+0x56>
    3392:	2c 81       	ldd	r18, Y+4	; 0x04
    3394:	3d 81       	ldd	r19, Y+5	; 0x05
    3396:	22 30       	cpi	r18, 0x02	; 2
    3398:	31 05       	cpc	r19, r1
    339a:	2c f4       	brge	.+10     	; 0x33a6 <LCD_moveCursor+0x3a>
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	9d 81       	ldd	r25, Y+5	; 0x05
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	61 f0       	breq	.+24     	; 0x33bc <LCD_moveCursor+0x50>
    33a4:	19 c0       	rjmp	.+50     	; 0x33d8 <LCD_moveCursor+0x6c>
    33a6:	2c 81       	ldd	r18, Y+4	; 0x04
    33a8:	3d 81       	ldd	r19, Y+5	; 0x05
    33aa:	22 30       	cpi	r18, 0x02	; 2
    33ac:	31 05       	cpc	r19, r1
    33ae:	69 f0       	breq	.+26     	; 0x33ca <LCD_moveCursor+0x5e>
    33b0:	8c 81       	ldd	r24, Y+4	; 0x04
    33b2:	9d 81       	ldd	r25, Y+5	; 0x05
    33b4:	83 30       	cpi	r24, 0x03	; 3
    33b6:	91 05       	cpc	r25, r1
    33b8:	61 f0       	breq	.+24     	; 0x33d2 <LCD_moveCursor+0x66>
    33ba:	0e c0       	rjmp	.+28     	; 0x33d8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	0b c0       	rjmp	.+22     	; 0x33d8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	80 5c       	subi	r24, 0xC0	; 192
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	07 c0       	rjmp	.+14     	; 0x33d8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	80 5f       	subi	r24, 0xF0	; 240
    33ce:	89 83       	std	Y+1, r24	; 0x01
    33d0:	03 c0       	rjmp	.+6      	; 0x33d8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	80 5b       	subi	r24, 0xB0	; 176
    33d6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	80 68       	ori	r24, 0x80	; 128
    33dc:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	08 95       	ret

000033f0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <LCD_displayStringRowColumn+0x6>
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <LCD_displayStringRowColumn+0x8>
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	6a 83       	std	Y+2, r22	; 0x02
    3400:	5c 83       	std	Y+4, r21	; 0x04
    3402:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	6a 81       	ldd	r22, Y+2	; 0x02
    3408:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    340c:	8b 81       	ldd	r24, Y+3	; 0x03
    340e:	9c 81       	ldd	r25, Y+4	; 0x04
    3410:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	62 97       	sbiw	r28, 0x12	; 18
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	9a 8b       	std	Y+18, r25	; 0x12
    3438:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    343a:	89 89       	ldd	r24, Y+17	; 0x11
    343c:	9a 89       	ldd	r25, Y+18	; 0x12
    343e:	9e 01       	movw	r18, r28
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	b9 01       	movw	r22, r18
    3446:	4a e0       	ldi	r20, 0x0A	; 10
    3448:	50 e0       	ldi	r21, 0x00	; 0
    344a:	0e 94 cf 1c 	call	0x399e	; 0x399e <itoa>
   LCD_displayString(buff); /* Display the string */
    344e:	ce 01       	movw	r24, r28
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    3456:	62 96       	adiw	r28, 0x12	; 18
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_sendCommand>
}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    347c:	1f 92       	push	r1
    347e:	0f 92       	push	r0
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	0f 92       	push	r0
    3484:	11 24       	eor	r1, r1
    3486:	2f 93       	push	r18
    3488:	3f 93       	push	r19
    348a:	4f 93       	push	r20
    348c:	5f 93       	push	r21
    348e:	6f 93       	push	r22
    3490:	7f 93       	push	r23
    3492:	8f 93       	push	r24
    3494:	9f 93       	push	r25
    3496:	af 93       	push	r26
    3498:	bf 93       	push	r27
    349a:	ef 93       	push	r30
    349c:	ff 93       	push	r31
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    34a6:	80 91 03 01 	lds	r24, 0x0103
    34aa:	90 91 04 01 	lds	r25, 0x0104
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	29 f0       	breq	.+10     	; 0x34bc <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match */
		(*g_callBackPtr)();
    34b2:	e0 91 03 01 	lds	r30, 0x0103
    34b6:	f0 91 04 01 	lds	r31, 0x0104
    34ba:	09 95       	icall
	}
}
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	ff 91       	pop	r31
    34c2:	ef 91       	pop	r30
    34c4:	bf 91       	pop	r27
    34c6:	af 91       	pop	r26
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	7f 91       	pop	r23
    34ce:	6f 91       	pop	r22
    34d0:	5f 91       	pop	r21
    34d2:	4f 91       	pop	r20
    34d4:	3f 91       	pop	r19
    34d6:	2f 91       	pop	r18
    34d8:	0f 90       	pop	r0
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	0f 90       	pop	r0
    34de:	1f 90       	pop	r1
    34e0:	18 95       	reti

000034e2 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    34e2:	1f 92       	push	r1
    34e4:	0f 92       	push	r0
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	0f 92       	push	r0
    34ea:	11 24       	eor	r1, r1
    34ec:	2f 93       	push	r18
    34ee:	3f 93       	push	r19
    34f0:	4f 93       	push	r20
    34f2:	5f 93       	push	r21
    34f4:	6f 93       	push	r22
    34f6:	7f 93       	push	r23
    34f8:	8f 93       	push	r24
    34fa:	9f 93       	push	r25
    34fc:	af 93       	push	r26
    34fe:	bf 93       	push	r27
    3500:	ef 93       	push	r30
    3502:	ff 93       	push	r31
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    350c:	80 91 03 01 	lds	r24, 0x0103
    3510:	90 91 04 01 	lds	r25, 0x0104
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	29 f0       	breq	.+10     	; 0x3522 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the counter overflow */
		(*g_callBackPtr)();
    3518:	e0 91 03 01 	lds	r30, 0x0103
    351c:	f0 91 04 01 	lds	r31, 0x0104
    3520:	09 95       	icall
	}
}
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	ff 91       	pop	r31
    3528:	ef 91       	pop	r30
    352a:	bf 91       	pop	r27
    352c:	af 91       	pop	r26
    352e:	9f 91       	pop	r25
    3530:	8f 91       	pop	r24
    3532:	7f 91       	pop	r23
    3534:	6f 91       	pop	r22
    3536:	5f 91       	pop	r21
    3538:	4f 91       	pop	r20
    353a:	3f 91       	pop	r19
    353c:	2f 91       	pop	r18
    353e:	0f 90       	pop	r0
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	0f 90       	pop	r0
    3544:	1f 90       	pop	r1
    3546:	18 95       	reti

00003548 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	00 d0       	rcall	.+0      	; 0x354e <Timer1_init+0x6>
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR1A Register:
	 * COM1A1 = 0, COM1A0 = 0, COM1B1 = 0, COM1B0 = 0 (Normal port operation, OC1A/OC1B disconnected.)
	 * FOC1A = 1, FOC1B = 1 (specifies a non-PWM mode)
	 * WGM10 = 0, WGM11 = 0 (either in normal or compare mode )*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    3556:	ef e4       	ldi	r30, 0x4F	; 79
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	8c e0       	ldi	r24, 0x0C	; 12
    355c:	80 83       	st	Z, r24
	 * ICNC1 = 0 (deactivates the Input Capture Noise Canceler)
	 * ICES1 = 0 (not used)
	 * CS10, CS11, CS12 (based on timer1 prescaler configuration)*/

	/*insert the required clock value in the first three bits (CS10, CS11 and CS12)*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    355e:	ae e4       	ldi	r26, 0x4E	; 78
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	ee e4       	ldi	r30, 0x4E	; 78
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	98 2f       	mov	r25, r24
    356a:	98 7f       	andi	r25, 0xF8	; 248
    356c:	e9 81       	ldd	r30, Y+1	; 0x01
    356e:	fa 81       	ldd	r31, Y+2	; 0x02
    3570:	84 81       	ldd	r24, Z+4	; 0x04
    3572:	89 2b       	or	r24, r25
    3574:	8c 93       	st	X, r24

	/*insert the required mode in WGM12 bit in TCCR1B Register*/
	TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<3);
    3576:	ae e4       	ldi	r26, 0x4E	; 78
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	ee e4       	ldi	r30, 0x4E	; 78
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	28 2f       	mov	r18, r24
    3582:	27 7f       	andi	r18, 0xF7	; 247
    3584:	e9 81       	ldd	r30, Y+1	; 0x01
    3586:	fa 81       	ldd	r31, Y+2	; 0x02
    3588:	85 81       	ldd	r24, Z+5	; 0x05
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	82 2b       	or	r24, r18
    359c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->initial_value;
    359e:	ac e4       	ldi	r26, 0x4C	; 76
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	e9 81       	ldd	r30, Y+1	; 0x01
    35a4:	fa 81       	ldd	r31, Y+2	; 0x02
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	11 96       	adiw	r26, 0x01	; 1
    35ac:	9c 93       	st	X, r25
    35ae:	8e 93       	st	-X, r24

	/* Compare Value for Timer1 in CTC mode*/
	if(Config_Ptr->mode == CTC)
    35b0:	e9 81       	ldd	r30, Y+1	; 0x01
    35b2:	fa 81       	ldd	r31, Y+2	; 0x02
    35b4:	85 81       	ldd	r24, Z+5	; 0x05
    35b6:	81 30       	cpi	r24, 0x01	; 1
    35b8:	89 f4       	brne	.+34     	; 0x35dc <Timer1_init+0x94>
	{
		/* Compare Value for Timer1 in CTC mode*/
		OCR1A = Config_Ptr->compare_value;
    35ba:	aa e4       	ldi	r26, 0x4A	; 74
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	11 96       	adiw	r26, 0x01	; 1
    35c8:	9c 93       	st	X, r25
    35ca:	8e 93       	st	-X, r24
		/* Enable the Output Compare A Match Interrupt */
		TIMSK |= (1<<OCIE1A);
    35cc:	a9 e5       	ldi	r26, 0x59	; 89
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e9 e5       	ldi	r30, 0x59	; 89
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	80 61       	ori	r24, 0x10	; 16
    35d8:	8c 93       	st	X, r24
    35da:	0c c0       	rjmp	.+24     	; 0x35f4 <Timer1_init+0xac>
	}
	else if(Config_Ptr->mode == NORMAL)
    35dc:	e9 81       	ldd	r30, Y+1	; 0x01
    35de:	fa 81       	ldd	r31, Y+2	; 0x02
    35e0:	85 81       	ldd	r24, Z+5	; 0x05
    35e2:	88 23       	and	r24, r24
    35e4:	39 f4       	brne	.+14     	; 0x35f4 <Timer1_init+0xac>
	{
		/* Enable the Overflow Interrupt */
		TIMSK |= (1<<TOIE1);
    35e6:	a9 e5       	ldi	r26, 0x59	; 89
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e9 e5       	ldi	r30, 0x59	; 89
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	84 60       	ori	r24, 0x04	; 4
    35f2:	8c 93       	st	X, r24
	}

	/*Enable the I-bit*/
	SREG |= (1<<7);
    35f4:	af e5       	ldi	r26, 0x5F	; 95
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	ef e5       	ldi	r30, 0x5F	; 95
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	80 68       	ori	r24, 0x80	; 128
    3600:	8c 93       	st	X, r24
}
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	08 95       	ret

0000360c <Timer1_deInit>:

void Timer1_deInit(void)
{
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    3614:	ef e4       	ldi	r30, 0x4F	; 79
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	10 82       	st	Z, r1
	TCCR1B = 0;
    361a:	ee e4       	ldi	r30, 0x4E	; 78
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	10 82       	st	Z, r1
	TCNT1 = 0;
    3620:	ec e4       	ldi	r30, 0x4C	; 76
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	11 82       	std	Z+1, r1	; 0x01
    3626:	10 82       	st	Z, r1
	OCR1A = 0;
    3628:	ea e4       	ldi	r30, 0x4A	; 74
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	11 82       	std	Z+1, r1	; 0x01
    362e:	10 82       	st	Z, r1

	/* Disable the output compare A match and overflow interrupt */
	TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    3630:	a9 e5       	ldi	r26, 0x59	; 89
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	e9 e5       	ldi	r30, 0x59	; 89
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	8b 7e       	andi	r24, 0xEB	; 235
    363c:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    363e:	10 92 04 01 	sts	0x0104, r1
    3642:	10 92 03 01 	sts	0x0103, r1

	/* Disable the i-bit */
	SREG &= ~(1<<7);
    3646:	af e5       	ldi	r26, 0x5F	; 95
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	ef e5       	ldi	r30, 0x5F	; 95
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	8f 77       	andi	r24, 0x7F	; 127
    3652:	8c 93       	st	X, r24
}
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <Timer1_setCallBack+0x6>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	9a 83       	std	Y+2, r25	; 0x02
    3666:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	90 93 04 01 	sts	0x0104, r25
    3670:	80 93 03 01 	sts	0x0103, r24
}
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <UART_init+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <UART_init+0x8>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    368e:	1a 82       	std	Y+2, r1	; 0x02
    3690:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3692:	eb e2       	ldi	r30, 0x2B	; 43
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	82 e0       	ldi	r24, 0x02	; 2
    3698:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    369a:	ea e2       	ldi	r30, 0x2A	; 42
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	88 e1       	ldi	r24, 0x18	; 24
    36a0:	80 83       	st	Z, r24
	if(BIT_IS_SET(Config_Ptr->bit_data,2))
    36a2:	eb 81       	ldd	r30, Y+3	; 0x03
    36a4:	fc 81       	ldd	r31, Y+4	; 0x04
    36a6:	80 81       	ld	r24, Z
    36a8:	88 2f       	mov	r24, r24
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	84 70       	andi	r24, 0x04	; 4
    36ae:	90 70       	andi	r25, 0x00	; 0
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	39 f0       	breq	.+14     	; 0x36c2 <UART_init+0x44>
	{
		UCSRB |= (1<<UCSZ2);
    36b4:	aa e2       	ldi	r26, 0x2A	; 42
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	ea e2       	ldi	r30, 0x2A	; 42
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	80 81       	ld	r24, Z
    36be:	84 60       	ori	r24, 0x04	; 4
    36c0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    36c2:	e0 e4       	ldi	r30, 0x40	; 64
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 e8       	ldi	r24, 0x80	; 128
    36c8:	80 83       	st	Z, r24
	if(BIT_IS_SET(Config_Ptr->bit_data,1))
    36ca:	eb 81       	ldd	r30, Y+3	; 0x03
    36cc:	fc 81       	ldd	r31, Y+4	; 0x04
    36ce:	80 81       	ld	r24, Z
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	82 70       	andi	r24, 0x02	; 2
    36d6:	90 70       	andi	r25, 0x00	; 0
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	39 f0       	breq	.+14     	; 0x36ea <UART_init+0x6c>
	{
		UCSRC |= (1<<UCSZ1);
    36dc:	a0 e4       	ldi	r26, 0x40	; 64
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e0 e4       	ldi	r30, 0x40	; 64
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	84 60       	ori	r24, 0x04	; 4
    36e8:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->bit_data,0))
    36ea:	eb 81       	ldd	r30, Y+3	; 0x03
    36ec:	fc 81       	ldd	r31, Y+4	; 0x04
    36ee:	80 81       	ld	r24, Z
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	81 70       	andi	r24, 0x01	; 1
    36f6:	90 70       	andi	r25, 0x00	; 0
    36f8:	88 23       	and	r24, r24
    36fa:	39 f0       	breq	.+14     	; 0x370a <UART_init+0x8c>
	{
		UCSRC |= (1<<UCSZ0);
    36fc:	a0 e4       	ldi	r26, 0x40	; 64
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	e0 e4       	ldi	r30, 0x40	; 64
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	82 60       	ori	r24, 0x02	; 2
    3708:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->parity,1))
    370a:	eb 81       	ldd	r30, Y+3	; 0x03
    370c:	fc 81       	ldd	r31, Y+4	; 0x04
    370e:	81 81       	ldd	r24, Z+1	; 0x01
    3710:	88 2f       	mov	r24, r24
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	82 70       	andi	r24, 0x02	; 2
    3716:	90 70       	andi	r25, 0x00	; 0
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	39 f0       	breq	.+14     	; 0x372a <UART_init+0xac>
	{
		UCSRC |= (1<<UPM1);
    371c:	a0 e4       	ldi	r26, 0x40	; 64
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e0 e4       	ldi	r30, 0x40	; 64
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	80 62       	ori	r24, 0x20	; 32
    3728:	8c 93       	st	X, r24
	}
	if(BIT_IS_SET(Config_Ptr->parity,0))
    372a:	eb 81       	ldd	r30, Y+3	; 0x03
    372c:	fc 81       	ldd	r31, Y+4	; 0x04
    372e:	81 81       	ldd	r24, Z+1	; 0x01
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	81 70       	andi	r24, 0x01	; 1
    3736:	90 70       	andi	r25, 0x00	; 0
    3738:	88 23       	and	r24, r24
    373a:	39 f0       	breq	.+14     	; 0x374a <UART_init+0xcc>
	{
		UCSRC |= (1<<UPM0);
    373c:	a0 e4       	ldi	r26, 0x40	; 64
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	e0 e4       	ldi	r30, 0x40	; 64
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	80 61       	ori	r24, 0x10	; 16
    3748:	8c 93       	st	X, r24
	}
	if(Config_Ptr->stop_bit == BIT2)
    374a:	eb 81       	ldd	r30, Y+3	; 0x03
    374c:	fc 81       	ldd	r31, Y+4	; 0x04
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	39 f4       	brne	.+14     	; 0x3762 <UART_init+0xe4>
	{
		UCSRC |= (1<<USBS);
    3754:	a0 e4       	ldi	r26, 0x40	; 64
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e0 e4       	ldi	r30, 0x40	; 64
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	88 60       	ori	r24, 0x08	; 8
    3760:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3762:	eb 81       	ldd	r30, Y+3	; 0x03
    3764:	fc 81       	ldd	r31, Y+4	; 0x04
    3766:	83 81       	ldd	r24, Z+3	; 0x03
    3768:	94 81       	ldd	r25, Z+4	; 0x04
    376a:	a5 81       	ldd	r26, Z+5	; 0x05
    376c:	b6 81       	ldd	r27, Z+6	; 0x06
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	aa 1f       	adc	r26, r26
    3774:	bb 1f       	adc	r27, r27
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	aa 1f       	adc	r26, r26
    377c:	bb 1f       	adc	r27, r27
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	aa 1f       	adc	r26, r26
    3784:	bb 1f       	adc	r27, r27
    3786:	9c 01       	movw	r18, r24
    3788:	ad 01       	movw	r20, r26
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	92 e1       	ldi	r25, 0x12	; 18
    378e:	aa e7       	ldi	r26, 0x7A	; 122
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    379a:	da 01       	movw	r26, r20
    379c:	c9 01       	movw	r24, r18
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    37a4:	e0 e4       	ldi	r30, 0x40	; 64
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	89 2f       	mov	r24, r25
    37ae:	99 27       	eor	r25, r25
    37b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    37b2:	e9 e2       	ldi	r30, 0x29	; 41
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	80 83       	st	Z, r24
}
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	0f 92       	push	r0
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    37d4:	eb e2       	ldi	r30, 0x2B	; 43
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	80 72       	andi	r24, 0x20	; 32
    37e0:	90 70       	andi	r25, 0x00	; 0
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	b9 f3       	breq	.-18     	; 0x37d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    37e6:	ec e2       	ldi	r30, 0x2C	; 44
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    37ee:	0f 90       	pop	r0
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    37fe:	eb e2       	ldi	r30, 0x2B	; 43
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	88 23       	and	r24, r24
    3806:	dc f7       	brge	.-10     	; 0x37fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3808:	ec e2       	ldi	r30, 0x2C	; 44
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
}
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	00 d0       	rcall	.+0      	; 0x381a <UART_sendString+0x6>
    381a:	0f 92       	push	r0
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	9b 83       	std	Y+3, r25	; 0x03
    3822:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3824:	19 82       	std	Y+1, r1	; 0x01
    3826:	0e c0       	rjmp	.+28     	; 0x3844 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	28 2f       	mov	r18, r24
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	9b 81       	ldd	r25, Y+3	; 0x03
    3832:	fc 01       	movw	r30, r24
    3834:	e2 0f       	add	r30, r18
    3836:	f3 1f       	adc	r31, r19
    3838:	80 81       	ld	r24, Z
    383a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <UART_sendByte>
		i++;
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	8f 5f       	subi	r24, 0xFF	; 255
    3842:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	28 2f       	mov	r18, r24
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	fc 01       	movw	r30, r24
    3850:	e2 0f       	add	r30, r18
    3852:	f3 1f       	adc	r31, r19
    3854:	80 81       	ld	r24, Z
    3856:	88 23       	and	r24, r24
    3858:	39 f7       	brne	.-50     	; 0x3828 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	00 d0       	rcall	.+0      	; 0x3870 <UART_receiveString+0xa>
    3870:	0f 92       	push	r0
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	9b 83       	std	Y+3, r25	; 0x03
    3878:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    387a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	9b 81       	ldd	r25, Y+3	; 0x03
    3886:	8c 01       	movw	r16, r24
    3888:	02 0f       	add	r16, r18
    388a:	13 1f       	adc	r17, r19
    388c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <UART_recieveByte>
    3890:	f8 01       	movw	r30, r16
    3892:	80 83       	st	Z, r24
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	8f 5f       	subi	r24, 0xFF	; 255
    389a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	9b 81       	ldd	r25, Y+3	; 0x03
    38a6:	8c 01       	movw	r16, r24
    38a8:	02 0f       	add	r16, r18
    38aa:	13 1f       	adc	r17, r19
    38ac:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <UART_recieveByte>
    38b0:	f8 01       	movw	r30, r16
    38b2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	9b 81       	ldd	r25, Y+3	; 0x03
    38be:	fc 01       	movw	r30, r24
    38c0:	e2 0f       	add	r30, r18
    38c2:	f3 1f       	adc	r31, r19
    38c4:	80 81       	ld	r24, Z
    38c6:	83 32       	cpi	r24, 0x23	; 35
    38c8:	31 f7       	brne	.-52     	; 0x3896 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	28 2f       	mov	r18, r24
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	9b 81       	ldd	r25, Y+3	; 0x03
    38d4:	fc 01       	movw	r30, r24
    38d6:	e2 0f       	add	r30, r18
    38d8:	f3 1f       	adc	r31, r19
    38da:	10 82       	st	Z, r1
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	08 95       	ret

000038ec <__udivmodsi4>:
    38ec:	a1 e2       	ldi	r26, 0x21	; 33
    38ee:	1a 2e       	mov	r1, r26
    38f0:	aa 1b       	sub	r26, r26
    38f2:	bb 1b       	sub	r27, r27
    38f4:	fd 01       	movw	r30, r26
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <__udivmodsi4_ep>

000038f8 <__udivmodsi4_loop>:
    38f8:	aa 1f       	adc	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	ee 1f       	adc	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	a2 17       	cp	r26, r18
    3902:	b3 07       	cpc	r27, r19
    3904:	e4 07       	cpc	r30, r20
    3906:	f5 07       	cpc	r31, r21
    3908:	20 f0       	brcs	.+8      	; 0x3912 <__udivmodsi4_ep>
    390a:	a2 1b       	sub	r26, r18
    390c:	b3 0b       	sbc	r27, r19
    390e:	e4 0b       	sbc	r30, r20
    3910:	f5 0b       	sbc	r31, r21

00003912 <__udivmodsi4_ep>:
    3912:	66 1f       	adc	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	1a 94       	dec	r1
    391c:	69 f7       	brne	.-38     	; 0x38f8 <__udivmodsi4_loop>
    391e:	60 95       	com	r22
    3920:	70 95       	com	r23
    3922:	80 95       	com	r24
    3924:	90 95       	com	r25
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	bd 01       	movw	r22, r26
    392c:	cf 01       	movw	r24, r30
    392e:	08 95       	ret

00003930 <__prologue_saves__>:
    3930:	2f 92       	push	r2
    3932:	3f 92       	push	r3
    3934:	4f 92       	push	r4
    3936:	5f 92       	push	r5
    3938:	6f 92       	push	r6
    393a:	7f 92       	push	r7
    393c:	8f 92       	push	r8
    393e:	9f 92       	push	r9
    3940:	af 92       	push	r10
    3942:	bf 92       	push	r11
    3944:	cf 92       	push	r12
    3946:	df 92       	push	r13
    3948:	ef 92       	push	r14
    394a:	ff 92       	push	r15
    394c:	0f 93       	push	r16
    394e:	1f 93       	push	r17
    3950:	cf 93       	push	r28
    3952:	df 93       	push	r29
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	ca 1b       	sub	r28, r26
    395a:	db 0b       	sbc	r29, r27
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	09 94       	ijmp

00003968 <__epilogue_restores__>:
    3968:	2a 88       	ldd	r2, Y+18	; 0x12
    396a:	39 88       	ldd	r3, Y+17	; 0x11
    396c:	48 88       	ldd	r4, Y+16	; 0x10
    396e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3970:	6e 84       	ldd	r6, Y+14	; 0x0e
    3972:	7d 84       	ldd	r7, Y+13	; 0x0d
    3974:	8c 84       	ldd	r8, Y+12	; 0x0c
    3976:	9b 84       	ldd	r9, Y+11	; 0x0b
    3978:	aa 84       	ldd	r10, Y+10	; 0x0a
    397a:	b9 84       	ldd	r11, Y+9	; 0x09
    397c:	c8 84       	ldd	r12, Y+8	; 0x08
    397e:	df 80       	ldd	r13, Y+7	; 0x07
    3980:	ee 80       	ldd	r14, Y+6	; 0x06
    3982:	fd 80       	ldd	r15, Y+5	; 0x05
    3984:	0c 81       	ldd	r16, Y+4	; 0x04
    3986:	1b 81       	ldd	r17, Y+3	; 0x03
    3988:	aa 81       	ldd	r26, Y+2	; 0x02
    398a:	b9 81       	ldd	r27, Y+1	; 0x01
    398c:	ce 0f       	add	r28, r30
    398e:	d1 1d       	adc	r29, r1
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	ed 01       	movw	r28, r26
    399c:	08 95       	ret

0000399e <itoa>:
    399e:	fb 01       	movw	r30, r22
    39a0:	9f 01       	movw	r18, r30
    39a2:	e8 94       	clt
    39a4:	42 30       	cpi	r20, 0x02	; 2
    39a6:	c4 f0       	brlt	.+48     	; 0x39d8 <itoa+0x3a>
    39a8:	45 32       	cpi	r20, 0x25	; 37
    39aa:	b4 f4       	brge	.+44     	; 0x39d8 <itoa+0x3a>
    39ac:	4a 30       	cpi	r20, 0x0A	; 10
    39ae:	29 f4       	brne	.+10     	; 0x39ba <itoa+0x1c>
    39b0:	97 fb       	bst	r25, 7
    39b2:	1e f4       	brtc	.+6      	; 0x39ba <itoa+0x1c>
    39b4:	90 95       	com	r25
    39b6:	81 95       	neg	r24
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	64 2f       	mov	r22, r20
    39bc:	77 27       	eor	r23, r23
    39be:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__udivmodhi4>
    39c2:	80 5d       	subi	r24, 0xD0	; 208
    39c4:	8a 33       	cpi	r24, 0x3A	; 58
    39c6:	0c f0       	brlt	.+2      	; 0x39ca <itoa+0x2c>
    39c8:	89 5d       	subi	r24, 0xD9	; 217
    39ca:	81 93       	st	Z+, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	a1 f7       	brne	.-24     	; 0x39ba <itoa+0x1c>
    39d2:	16 f4       	brtc	.+4      	; 0x39d8 <itoa+0x3a>
    39d4:	5d e2       	ldi	r21, 0x2D	; 45
    39d6:	51 93       	st	Z+, r21
    39d8:	10 82       	st	Z, r1
    39da:	c9 01       	movw	r24, r18
    39dc:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <strrev>

000039e0 <strrev>:
    39e0:	dc 01       	movw	r26, r24
    39e2:	fc 01       	movw	r30, r24
    39e4:	67 2f       	mov	r22, r23
    39e6:	71 91       	ld	r23, Z+
    39e8:	77 23       	and	r23, r23
    39ea:	e1 f7       	brne	.-8      	; 0x39e4 <strrev+0x4>
    39ec:	32 97       	sbiw	r30, 0x02	; 2
    39ee:	04 c0       	rjmp	.+8      	; 0x39f8 <strrev+0x18>
    39f0:	7c 91       	ld	r23, X
    39f2:	6d 93       	st	X+, r22
    39f4:	70 83       	st	Z, r23
    39f6:	62 91       	ld	r22, -Z
    39f8:	ae 17       	cp	r26, r30
    39fa:	bf 07       	cpc	r27, r31
    39fc:	c8 f3       	brcs	.-14     	; 0x39f0 <strrev+0x10>
    39fe:	08 95       	ret

00003a00 <__udivmodhi4>:
    3a00:	aa 1b       	sub	r26, r26
    3a02:	bb 1b       	sub	r27, r27
    3a04:	51 e1       	ldi	r21, 0x11	; 17
    3a06:	07 c0       	rjmp	.+14     	; 0x3a16 <__udivmodhi4_ep>

00003a08 <__udivmodhi4_loop>:
    3a08:	aa 1f       	adc	r26, r26
    3a0a:	bb 1f       	adc	r27, r27
    3a0c:	a6 17       	cp	r26, r22
    3a0e:	b7 07       	cpc	r27, r23
    3a10:	10 f0       	brcs	.+4      	; 0x3a16 <__udivmodhi4_ep>
    3a12:	a6 1b       	sub	r26, r22
    3a14:	b7 0b       	sbc	r27, r23

00003a16 <__udivmodhi4_ep>:
    3a16:	88 1f       	adc	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	5a 95       	dec	r21
    3a1c:	a9 f7       	brne	.-22     	; 0x3a08 <__udivmodhi4_loop>
    3a1e:	80 95       	com	r24
    3a20:	90 95       	com	r25
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	08 95       	ret

00003a28 <_exit>:
    3a28:	f8 94       	cli

00003a2a <__stop_program>:
    3a2a:	ff cf       	rjmp	.-2      	; 0x3a2a <__stop_program>
